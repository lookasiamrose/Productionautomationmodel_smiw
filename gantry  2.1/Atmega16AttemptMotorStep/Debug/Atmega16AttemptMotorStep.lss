
Atmega16AttemptMotorStep.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000010be  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00001132  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000036e  00800060  00800060  00001132  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001132  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001164  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c8  00000000  00000000  000011a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001893  00000000  00000000  00001268  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a16  00000000  00000000  00002afb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000b35  00000000  00000000  00003511  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002b4  00000000  00000000  00004048  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000700  00000000  00000000  000042fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000dc9  00000000  00000000  000049fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000120  00000000  00000000  000057c5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
       8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
       c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      18:	0c 94 8b 01 	jmp	0x316	; 0x316 <__vector_6>
      1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      24:	0c 94 72 06 	jmp	0xce4	; 0xce4 <__vector_9>
      28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__vector_11>
      30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
      60:	23 e0       	ldi	r18, 0x03	; 3
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
      68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
      6a:	ae 3c       	cpi	r26, 0xCE	; 206
      6c:	b2 07       	cpc	r27, r18
      6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
      70:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <main>
      74:	0c 94 5d 08 	jmp	0x10ba	; 0x10ba <_exit>

00000078 <__bad_interrupt>:
      78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <__vector_11>:
#include "hd44780.h"

volatile char command[8];

ISR(USART_RXC_vect)
{
      7c:	1f 92       	push	r1
      7e:	0f 92       	push	r0
      80:	0f b6       	in	r0, 0x3f	; 63
      82:	0f 92       	push	r0
      84:	11 24       	eor	r1, r1
      86:	ef 92       	push	r14
      88:	0f 93       	push	r16
      8a:	2f 93       	push	r18
      8c:	3f 93       	push	r19
      8e:	4f 93       	push	r20
      90:	5f 93       	push	r21
      92:	6f 93       	push	r22
      94:	7f 93       	push	r23
      96:	8f 93       	push	r24
      98:	9f 93       	push	r25
      9a:	af 93       	push	r26
      9c:	bf 93       	push	r27
      9e:	ef 93       	push	r30
      a0:	ff 93       	push	r31
	command[0] = command[1];
      a2:	e0 e6       	ldi	r30, 0x60	; 96
      a4:	f0 e0       	ldi	r31, 0x00	; 0
      a6:	81 81       	ldd	r24, Z+1	; 0x01
      a8:	80 83       	st	Z, r24
	command[1] = command[2];
      aa:	82 81       	ldd	r24, Z+2	; 0x02
      ac:	81 83       	std	Z+1, r24	; 0x01
	command[2] = command[3];
      ae:	83 81       	ldd	r24, Z+3	; 0x03
      b0:	82 83       	std	Z+2, r24	; 0x02
	command[3] = command[4];
      b2:	84 81       	ldd	r24, Z+4	; 0x04
      b4:	83 83       	std	Z+3, r24	; 0x03
	command[4] = command[5];
      b6:	85 81       	ldd	r24, Z+5	; 0x05
      b8:	84 83       	std	Z+4, r24	; 0x04
	command[5] = command[6];
      ba:	86 81       	ldd	r24, Z+6	; 0x06
      bc:	85 83       	std	Z+5, r24	; 0x05
	command[6] = command[7];
      be:	87 81       	ldd	r24, Z+7	; 0x07
      c0:	86 83       	std	Z+6, r24	; 0x06
	command[7] = UDR;
      c2:	8c b1       	in	r24, 0x0c	; 12
      c4:	87 83       	std	Z+7, r24	; 0x07
	
	if(command[7] == '.')
      c6:	87 81       	ldd	r24, Z+7	; 0x07
      c8:	8e 32       	cpi	r24, 0x2E	; 46
      ca:	09 f0       	breq	.+2      	; 0xce <__vector_11+0x52>
      cc:	54 c0       	rjmp	.+168    	; 0x176 <__vector_11+0xfa>
	{
		enum StepperDirection dir = UNDEFINED;
		if(command[1] == '<') dir = COUNTERCLOCKWISE;
      ce:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <_edata+0x1>
      d2:	8c 33       	cpi	r24, 0x3C	; 60
      d4:	31 f0       	breq	.+12     	; 0xe2 <__vector_11+0x66>
			else
				if(command[1] == '>')	dir = CLOCKWISE;
      d6:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <_edata+0x1>
      da:	8e 33       	cpi	r24, 0x3E	; 62
      dc:	21 f4       	brne	.+8      	; 0xe6 <__vector_11+0x6a>
      de:	40 e0       	ldi	r20, 0x00	; 0
      e0:	03 c0       	rjmp	.+6      	; 0xe8 <__vector_11+0x6c>
	command[7] = UDR;
	
	if(command[7] == '.')
	{
		enum StepperDirection dir = UNDEFINED;
		if(command[1] == '<') dir = COUNTERCLOCKWISE;
      e2:	41 e0       	ldi	r20, 0x01	; 1
      e4:	01 c0       	rjmp	.+2      	; 0xe8 <__vector_11+0x6c>
	command[6] = command[7];
	command[7] = UDR;
	
	if(command[7] == '.')
	{
		enum StepperDirection dir = UNDEFINED;
      e6:	42 e0       	ldi	r20, 0x02	; 2
		if(command[1] == '<') dir = COUNTERCLOCKWISE;
			else
				if(command[1] == '>')	dir = CLOCKWISE;
		uint16_t steps = 0;
		steps = 0xff & command[3];
      e8:	e0 e6       	ldi	r30, 0x60	; 96
      ea:	f0 e0       	ldi	r31, 0x00	; 0
      ec:	63 81       	ldd	r22, Z+3	; 0x03
      ee:	70 e0       	ldi	r23, 0x00	; 0
		steps <<= 8;
      f0:	76 2f       	mov	r23, r22
      f2:	66 27       	eor	r22, r22
		steps |= 0xff & command[2];
      f4:	82 81       	ldd	r24, Z+2	; 0x02
      f6:	68 2b       	or	r22, r24
		switch(command[0])
      f8:	80 81       	ld	r24, Z
      fa:	83 37       	cpi	r24, 0x73	; 115
      fc:	79 f1       	breq	.+94     	; 0x15c <__vector_11+0xe0>
      fe:	28 f4       	brcc	.+10     	; 0x10a <__vector_11+0x8e>
     100:	8c 36       	cpi	r24, 0x6C	; 108
     102:	89 f0       	breq	.+34     	; 0x126 <__vector_11+0xaa>
     104:	8d 36       	cpi	r24, 0x6D	; 109
     106:	31 f0       	breq	.+12     	; 0x114 <__vector_11+0x98>
     108:	5c c0       	rjmp	.+184    	; 0x1c2 <__vector_11+0x146>
     10a:	84 37       	cpi	r24, 0x74	; 116
     10c:	f1 f0       	breq	.+60     	; 0x14a <__vector_11+0xce>
     10e:	85 37       	cpi	r24, 0x75	; 117
     110:	99 f0       	breq	.+38     	; 0x138 <__vector_11+0xbc>
     112:	57 c0       	rjmp	.+174    	; 0x1c2 <__vector_11+0x146>
		{
			case 'm':
				stepper_push_back_order(MOVE,steps,dir,command[4],command[5],command[6]);
     114:	e0 e6       	ldi	r30, 0x60	; 96
     116:	f0 e0       	ldi	r31, 0x00	; 0
     118:	e6 80       	ldd	r14, Z+6	; 0x06
     11a:	05 81       	ldd	r16, Z+5	; 0x05
     11c:	24 81       	ldd	r18, Z+4	; 0x04
     11e:	83 e0       	ldi	r24, 0x03	; 3
     120:	0e 94 16 07 	call	0xe2c	; 0xe2c <stepper_push_back_order>
			break;
     124:	4e c0       	rjmp	.+156    	; 0x1c2 <__vector_11+0x146>
			case 'l':
				stepper_push_back_order(LEFTRIGHT,steps,dir,command[4],command[5],command[6]);
     126:	e0 e6       	ldi	r30, 0x60	; 96
     128:	f0 e0       	ldi	r31, 0x00	; 0
     12a:	e6 80       	ldd	r14, Z+6	; 0x06
     12c:	05 81       	ldd	r16, Z+5	; 0x05
     12e:	24 81       	ldd	r18, Z+4	; 0x04
     130:	82 e0       	ldi	r24, 0x02	; 2
     132:	0e 94 16 07 	call	0xe2c	; 0xe2c <stepper_push_back_order>
			break;
     136:	45 c0       	rjmp	.+138    	; 0x1c2 <__vector_11+0x146>
			case 'u':
				stepper_push_back_order(UPDOWN,steps,dir,command[4],command[5],command[6]);
     138:	e0 e6       	ldi	r30, 0x60	; 96
     13a:	f0 e0       	ldi	r31, 0x00	; 0
     13c:	e6 80       	ldd	r14, Z+6	; 0x06
     13e:	05 81       	ldd	r16, Z+5	; 0x05
     140:	24 81       	ldd	r18, Z+4	; 0x04
     142:	81 e0       	ldi	r24, 0x01	; 1
     144:	0e 94 16 07 	call	0xe2c	; 0xe2c <stepper_push_back_order>
			break;
     148:	3c c0       	rjmp	.+120    	; 0x1c2 <__vector_11+0x146>
			case 't':
				stepper_push_back_order(TURN,steps,dir,command[4],command[5],command[6]);
     14a:	e0 e6       	ldi	r30, 0x60	; 96
     14c:	f0 e0       	ldi	r31, 0x00	; 0
     14e:	e6 80       	ldd	r14, Z+6	; 0x06
     150:	05 81       	ldd	r16, Z+5	; 0x05
     152:	24 81       	ldd	r18, Z+4	; 0x04
     154:	80 e0       	ldi	r24, 0x00	; 0
     156:	0e 94 16 07 	call	0xe2c	; 0xe2c <stepper_push_back_order>
			break;
     15a:	33 c0       	rjmp	.+102    	; 0x1c2 <__vector_11+0x146>
			case 's':;
				if(command[1] == 'S') 
     15c:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <_edata+0x1>
     160:	83 35       	cpi	r24, 0x53	; 83
     162:	79 f1       	breq	.+94     	; 0x1c2 <__vector_11+0x146>
				{
					
				}else
					servo_push_back_order(PUSH,steps,command[4],command[5],command[6]);
     164:	e0 e6       	ldi	r30, 0x60	; 96
     166:	f0 e0       	ldi	r31, 0x00	; 0
     168:	06 81       	ldd	r16, Z+6	; 0x06
     16a:	25 81       	ldd	r18, Z+5	; 0x05
     16c:	44 81       	ldd	r20, Z+4	; 0x04
     16e:	80 e0       	ldi	r24, 0x00	; 0
     170:	0e 94 48 02 	call	0x490	; 0x490 <servo_push_back_order>
     174:	26 c0       	rjmp	.+76     	; 0x1c2 <__vector_11+0x146>
			break;
		}

	}
	else 
	if(command[7] == ';')
     176:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <_edata+0x7>
     17a:	8b 33       	cpi	r24, 0x3B	; 59
     17c:	69 f4       	brne	.+26     	; 0x198 <__vector_11+0x11c>
	{
		for(uint8_t i = 0; i < STEPPER_NUM_OF_MOTORS; i++) stepper_pop_front_order(i);
     17e:	80 e0       	ldi	r24, 0x00	; 0
     180:	0e 94 0d 04 	call	0x81a	; 0x81a <stepper_pop_front_order>
     184:	81 e0       	ldi	r24, 0x01	; 1
     186:	0e 94 0d 04 	call	0x81a	; 0x81a <stepper_pop_front_order>
     18a:	82 e0       	ldi	r24, 0x02	; 2
     18c:	0e 94 0d 04 	call	0x81a	; 0x81a <stepper_pop_front_order>
     190:	83 e0       	ldi	r24, 0x03	; 3
     192:	0e 94 0d 04 	call	0x81a	; 0x81a <stepper_pop_front_order>
     196:	15 c0       	rjmp	.+42     	; 0x1c2 <__vector_11+0x146>
	}else
	if(command[7] == 'X')
     198:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <_edata+0x7>
     19c:	88 35       	cpi	r24, 0x58	; 88
     19e:	39 f4       	brne	.+14     	; 0x1ae <__vector_11+0x132>
	{
		TCCR0 &= ~(1<<CS00);
     1a0:	83 b7       	in	r24, 0x33	; 51
     1a2:	8e 7f       	andi	r24, 0xFE	; 254
     1a4:	83 bf       	out	0x33, r24	; 51
		TCCR1B&= ~( (1<<CS11)|(1<<CS10) );
     1a6:	8e b5       	in	r24, 0x2e	; 46
     1a8:	8c 7f       	andi	r24, 0xFC	; 252
     1aa:	8e bd       	out	0x2e, r24	; 46
     1ac:	0a c0       	rjmp	.+20     	; 0x1c2 <__vector_11+0x146>
	}else
	if(command[7] == 'Y')
     1ae:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <_edata+0x7>
     1b2:	89 35       	cpi	r24, 0x59	; 89
     1b4:	31 f4       	brne	.+12     	; 0x1c2 <__vector_11+0x146>
	{
		TCCR0 |= (1<<CS00);
     1b6:	83 b7       	in	r24, 0x33	; 51
     1b8:	81 60       	ori	r24, 0x01	; 1
     1ba:	83 bf       	out	0x33, r24	; 51
		TCCR1B|= (1<<CS11)|(1<<CS10);
     1bc:	8e b5       	in	r24, 0x2e	; 46
     1be:	83 60       	ori	r24, 0x03	; 3
     1c0:	8e bd       	out	0x2e, r24	; 46
	}
		
}
     1c2:	ff 91       	pop	r31
     1c4:	ef 91       	pop	r30
     1c6:	bf 91       	pop	r27
     1c8:	af 91       	pop	r26
     1ca:	9f 91       	pop	r25
     1cc:	8f 91       	pop	r24
     1ce:	7f 91       	pop	r23
     1d0:	6f 91       	pop	r22
     1d2:	5f 91       	pop	r21
     1d4:	4f 91       	pop	r20
     1d6:	3f 91       	pop	r19
     1d8:	2f 91       	pop	r18
     1da:	0f 91       	pop	r16
     1dc:	ef 90       	pop	r14
     1de:	0f 90       	pop	r0
     1e0:	0f be       	out	0x3f, r0	; 63
     1e2:	0f 90       	pop	r0
     1e4:	1f 90       	pop	r1
     1e6:	18 95       	reti

000001e8 <main>:

int main(void)
{
	PORTB = 0x00;
     1e8:	18 ba       	out	0x18, r1	; 24
	DDRB = 0xff;
     1ea:	8f ef       	ldi	r24, 0xFF	; 255
     1ec:	87 bb       	out	0x17, r24	; 23
	
	PORTA = 0x00;
     1ee:	1b ba       	out	0x1b, r1	; 27
	DDRA = 0xff;
     1f0:	8a bb       	out	0x1a, r24	; 26
	
	PORTC = 0x00;
     1f2:	15 ba       	out	0x15, r1	; 21
	DDRC = 0xff;
     1f4:	84 bb       	out	0x14, r24	; 20
	
	PORTD = 0x00;
     1f6:	12 ba       	out	0x12, r1	; 18
	DDRD = 0x02;
     1f8:	82 e0       	ldi	r24, 0x02	; 2
     1fa:	81 bb       	out	0x11, r24	; 17
	
	UBRRH = 0; //data bits: 8 //baud:  57600 
     1fc:	10 bc       	out	0x20, r1	; 32
	UBRRL = 16; //stop bits:  1 //parity:  No
     1fe:	80 e1       	ldi	r24, 0x10	; 16
     200:	89 b9       	out	0x09, r24	; 9
	UCSRC |= (1<<URSEL)|(1<<UCSZ1)|(1<<UCSZ0);  
     202:	80 b5       	in	r24, 0x20	; 32
     204:	86 68       	ori	r24, 0x86	; 134
     206:	80 bd       	out	0x20, r24	; 32
	UCSRB |= (1<<RXEN)|(1<<RXCIE)|(1<<TXEN)|(1<<TXCIE);
     208:	8a b1       	in	r24, 0x0a	; 10
     20a:	88 6d       	ori	r24, 0xD8	; 216
     20c:	8a b9       	out	0x0a, r24	; 10
	
	stepper_add_motor(TURN,&PORTB,LSB);
     20e:	41 e0       	ldi	r20, 0x01	; 1
     210:	68 e3       	ldi	r22, 0x38	; 56
     212:	70 e0       	ldi	r23, 0x00	; 0
     214:	80 e0       	ldi	r24, 0x00	; 0
     216:	0e 94 ae 03 	call	0x75c	; 0x75c <stepper_add_motor>
	stepper_add_motor(UPDOWN,&PORTB,MSB);	
     21a:	40 e0       	ldi	r20, 0x00	; 0
     21c:	68 e3       	ldi	r22, 0x38	; 56
     21e:	70 e0       	ldi	r23, 0x00	; 0
     220:	81 e0       	ldi	r24, 0x01	; 1
     222:	0e 94 ae 03 	call	0x75c	; 0x75c <stepper_add_motor>
	stepper_add_motor(MOVE,&PORTC,MSB);
     226:	40 e0       	ldi	r20, 0x00	; 0
     228:	65 e3       	ldi	r22, 0x35	; 53
     22a:	70 e0       	ldi	r23, 0x00	; 0
     22c:	83 e0       	ldi	r24, 0x03	; 3
     22e:	0e 94 ae 03 	call	0x75c	; 0x75c <stepper_add_motor>
	stepper_add_motor(LEFTRIGHT,&PORTC,LSB);
     232:	41 e0       	ldi	r20, 0x01	; 1
     234:	65 e3       	ldi	r22, 0x35	; 53
     236:	70 e0       	ldi	r23, 0x00	; 0
     238:	82 e0       	ldi	r24, 0x02	; 2
     23a:	0e 94 ae 03 	call	0x75c	; 0x75c <stepper_add_motor>
	servo_add_servo(PUSH,&PORTD,PD5,0);
     23e:	20 e0       	ldi	r18, 0x00	; 0
     240:	30 e0       	ldi	r19, 0x00	; 0
     242:	45 e0       	ldi	r20, 0x05	; 5
     244:	62 e3       	ldi	r22, 0x32	; 50
     246:	70 e0       	ldi	r23, 0x00	; 0
     248:	80 e0       	ldi	r24, 0x00	; 0
     24a:	0e 94 36 02 	call	0x46c	; 0x46c <servo_add_servo>
	
	stepper_fastest_and_init_motors();	
     24e:	0e 94 c9 03 	call	0x792	; 0x792 <stepper_fastest_and_init_motors>
	stepper_init();
     252:	0e 94 bf 03 	call	0x77e	; 0x77e <stepper_init>
	servo_init();
     256:	0e 94 3e 01 	call	0x27c	; 0x27c <servo_init>

	//stepper_push_back_order(TURN,10000,CLOCKWISE,0,8,'y'); //1
	//stepper_push_back_order(TURN,1500,CLOCKWISE,0,3,'y');//1
	servo_push_back_order(PUSH,200,0,7,'n'); //1
     25a:	0e e6       	ldi	r16, 0x6E	; 110
     25c:	27 e0       	ldi	r18, 0x07	; 7
     25e:	40 e0       	ldi	r20, 0x00	; 0
     260:	68 ec       	ldi	r22, 0xC8	; 200
     262:	70 e0       	ldi	r23, 0x00	; 0
     264:	80 e0       	ldi	r24, 0x00	; 0
     266:	0e 94 48 02 	call	0x490	; 0x490 <servo_push_back_order>
	servo_push_back_order(PUSH,400,7,8,'y'); //1
     26a:	09 e7       	ldi	r16, 0x79	; 121
     26c:	28 e0       	ldi	r18, 0x08	; 8
     26e:	47 e0       	ldi	r20, 0x07	; 7
     270:	60 e9       	ldi	r22, 0x90	; 144
     272:	71 e0       	ldi	r23, 0x01	; 1
     274:	80 e0       	ldi	r24, 0x00	; 0
     276:	0e 94 48 02 	call	0x490	; 0x490 <servo_push_back_order>
	/*stepper_push_back_order(UPDOWN,18000,CLOCKWISE,8,30,'y'); //1
	stepper_push_back_order(TURN,16000,COUNTERCLOCKWISE,30,2,'n'); //3
	servo_push_back_order(PUSH,4500,0,9,'y'); //2
	servo_push_back_order(PUSH,9000,8,30,'n'); //2*/
	
    while(1) {}
     27a:	ff cf       	rjmp	.-2      	; 0x27a <main+0x92>

0000027c <servo_init>:
 *  Author: lukasz.jamroz
 */ 
#include "servo.h"

void servo_init()
{
     27c:	80 e0       	ldi	r24, 0x00	; 0
     27e:	90 e0       	ldi	r25, 0x00	; 0
	for(uint8_t i = 0;i<SERVO_ORDERS_TOTAL_NUMBER; i++)
	{
		servo_orders_table[i].customer_index = 0;
     280:	fc 01       	movw	r30, r24
     282:	ee 0f       	add	r30, r30
     284:	ff 1f       	adc	r31, r31
     286:	ee 0f       	add	r30, r30
     288:	ff 1f       	adc	r31, r31
     28a:	e8 0f       	add	r30, r24
     28c:	f9 1f       	adc	r31, r25
     28e:	e0 59       	subi	r30, 0x90	; 144
     290:	ff 4f       	sbci	r31, 0xFF	; 255
     292:	10 82       	st	Z, r1
		servo_orders_table[i].barrier = 0;
     294:	13 82       	std	Z+3, r1	; 0x03
		servo_orders_table[i].next = 0;
     296:	14 82       	std	Z+4, r1	; 0x04
		servo_orders_table[i].position = 0;
     298:	12 82       	std	Z+2, r1	; 0x02
     29a:	11 82       	std	Z+1, r1	; 0x01
     29c:	01 96       	adiw	r24, 0x01	; 1
 */ 
#include "servo.h"

void servo_init()
{
	for(uint8_t i = 0;i<SERVO_ORDERS_TOTAL_NUMBER; i++)
     29e:	8a 30       	cpi	r24, 0x0A	; 10
     2a0:	91 05       	cpc	r25, r1
     2a2:	71 f7       	brne	.-36     	; 0x280 <servo_init+0x4>
     2a4:	31 c0       	rjmp	.+98     	; 0x308 <servo_init+0x8c>
		servo_orders_table[i].position = 0;
	}
	
	for(uint8_t index = 0;index<SERVO_NUM_OF_SERVOS;index++)
	{
		if( (servo_servos_table[index].port == &PORTD) && (servo_servos_table[index].pin == PD5) )
     2a6:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <servo_servos_table+0x3>
     2aa:	85 30       	cpi	r24, 0x05	; 5
     2ac:	21 f5       	brne	.+72     	; 0x2f6 <servo_init+0x7a>
		{
			//Set pins as output and no pullup
			DDRD  |= (1<<servo_servos_table[index].pin);
     2ae:	e8 e6       	ldi	r30, 0x68	; 104
     2b0:	f0 e0       	ldi	r31, 0x00	; 0
     2b2:	23 81       	ldd	r18, Z+3	; 0x03
     2b4:	41 b3       	in	r20, 0x11	; 17
     2b6:	81 e0       	ldi	r24, 0x01	; 1
     2b8:	90 e0       	ldi	r25, 0x00	; 0
     2ba:	bc 01       	movw	r22, r24
     2bc:	02 c0       	rjmp	.+4      	; 0x2c2 <servo_init+0x46>
     2be:	66 0f       	add	r22, r22
     2c0:	77 1f       	adc	r23, r23
     2c2:	2a 95       	dec	r18
     2c4:	e2 f7       	brpl	.-8      	; 0x2be <servo_init+0x42>
     2c6:	9b 01       	movw	r18, r22
     2c8:	24 2b       	or	r18, r20
     2ca:	21 bb       	out	0x11, r18	; 17
			PORTD &= ~(1<<servo_servos_table[index].pin);
     2cc:	33 81       	ldd	r19, Z+3	; 0x03
     2ce:	22 b3       	in	r18, 0x12	; 18
     2d0:	02 c0       	rjmp	.+4      	; 0x2d6 <servo_init+0x5a>
     2d2:	88 0f       	add	r24, r24
     2d4:	99 1f       	adc	r25, r25
     2d6:	3a 95       	dec	r19
     2d8:	e2 f7       	brpl	.-8      	; 0x2d2 <servo_init+0x56>
     2da:	80 95       	com	r24
     2dc:	90 95       	com	r25
     2de:	82 23       	and	r24, r18
     2e0:	82 bb       	out	0x12, r24	; 18
			OCR1A = servo_servos_table[index].actual_position;
     2e2:	84 81       	ldd	r24, Z+4	; 0x04
     2e4:	95 81       	ldd	r25, Z+5	; 0x05
     2e6:	9b bd       	out	0x2b, r25	; 43
     2e8:	8a bd       	out	0x2a, r24	; 42
			
			TCCR1A|=(1<<COM1A1)|(1<<WGM11);        //NON Inverted PWM
     2ea:	8f b5       	in	r24, 0x2f	; 47
     2ec:	82 68       	ori	r24, 0x82	; 130
     2ee:	8f bd       	out	0x2f, r24	; 47
			TCCR1B|=(1<<WGM13)|(1<<WGM12)|(1<<CS11)|(1<<CS10); //PRESCALER=64 MODE 14(FAST PWM)
     2f0:	8e b5       	in	r24, 0x2e	; 46
     2f2:	8b 61       	ori	r24, 0x1B	; 27
     2f4:	8e bd       	out	0x2e, r24	; 46
		}
	}
	
	ICR1=4999;  //fPWM=50Hz (Period = 20ms Standard).
     2f6:	87 e8       	ldi	r24, 0x87	; 135
     2f8:	93 e1       	ldi	r25, 0x13	; 19
     2fa:	97 bd       	out	0x27, r25	; 39
     2fc:	86 bd       	out	0x26, r24	; 38
	TIMSK |= (1<<OCIE1A);
     2fe:	89 b7       	in	r24, 0x39	; 57
     300:	80 61       	ori	r24, 0x10	; 16
     302:	89 bf       	out	0x39, r24	; 57
	
	sei();
     304:	78 94       	sei
     306:	08 95       	ret
		servo_orders_table[i].position = 0;
	}
	
	for(uint8_t index = 0;index<SERVO_NUM_OF_SERVOS;index++)
	{
		if( (servo_servos_table[index].port == &PORTD) && (servo_servos_table[index].pin == PD5) )
     308:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <servo_servos_table+0x1>
     30c:	90 91 6a 00 	lds	r25, 0x006A	; 0x80006a <servo_servos_table+0x2>
     310:	c2 97       	sbiw	r24, 0x32	; 50
     312:	89 f7       	brne	.-30     	; 0x2f6 <servo_init+0x7a>
     314:	c8 cf       	rjmp	.-112    	; 0x2a6 <servo_init+0x2a>

00000316 <__vector_6>:
	TIMSK |= (1<<OCIE1A);
	
	sei();
}
ISR(TIMER1_COMPA_vect)
{
     316:	1f 92       	push	r1
     318:	0f 92       	push	r0
     31a:	0f b6       	in	r0, 0x3f	; 63
     31c:	0f 92       	push	r0
     31e:	11 24       	eor	r1, r1
     320:	ef 92       	push	r14
     322:	0f 93       	push	r16
     324:	2f 93       	push	r18
     326:	3f 93       	push	r19
     328:	4f 93       	push	r20
     32a:	5f 93       	push	r21
     32c:	6f 93       	push	r22
     32e:	7f 93       	push	r23
     330:	8f 93       	push	r24
     332:	9f 93       	push	r25
     334:	af 93       	push	r26
     336:	bf 93       	push	r27
     338:	ef 93       	push	r30
     33a:	ff 93       	push	r31
	for(uint8_t index = 0;index<SERVO_NUM_OF_SERVOS;index++)
	{
		if(servo_servos_table[index].barrier_delay > 0){
     33c:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <servo_servos_table+0x7>
     340:	88 23       	and	r24, r24
     342:	09 f4       	brne	.+2      	; 0x346 <__vector_6+0x30>
     344:	5f c0       	rjmp	.+190    	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
			if( servo_servos_table[index].barrier_delay > 99 )
     346:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <servo_servos_table+0x7>
     34a:	84 36       	cpi	r24, 0x64	; 100
     34c:	08 f4       	brcc	.+2      	; 0x350 <__vector_6+0x3a>
     34e:	55 c0       	rjmp	.+170    	; 0x3fa <__vector_6+0xe4>
			{
				stepper_push_back_order(TURN,800,CLOCKWISE,0,100,'n');
     350:	0f 2e       	mov	r0, r31
     352:	fe e6       	ldi	r31, 0x6E	; 110
     354:	ef 2e       	mov	r14, r31
     356:	f0 2d       	mov	r31, r0
     358:	04 e6       	ldi	r16, 0x64	; 100
     35a:	20 e0       	ldi	r18, 0x00	; 0
     35c:	40 e0       	ldi	r20, 0x00	; 0
     35e:	60 e2       	ldi	r22, 0x20	; 32
     360:	73 e0       	ldi	r23, 0x03	; 3
     362:	80 e0       	ldi	r24, 0x00	; 0
     364:	0e 94 16 07 	call	0xe2c	; 0xe2c <stepper_push_back_order>
				uint8_t temp = servo_orders_table[ servo_servos_table[index].orders_head ].next;
     368:	a8 e6       	ldi	r26, 0x68	; 104
     36a:	b0 e0       	ldi	r27, 0x00	; 0
     36c:	16 96       	adiw	r26, 0x06	; 6
     36e:	8c 91       	ld	r24, X
     370:	16 97       	sbiw	r26, 0x06	; 6
     372:	90 e0       	ldi	r25, 0x00	; 0
     374:	fc 01       	movw	r30, r24
     376:	ee 0f       	add	r30, r30
     378:	ff 1f       	adc	r31, r31
     37a:	ee 0f       	add	r30, r30
     37c:	ff 1f       	adc	r31, r31
     37e:	8e 0f       	add	r24, r30
     380:	9f 1f       	adc	r25, r31
     382:	fc 01       	movw	r30, r24
     384:	e0 59       	subi	r30, 0x90	; 144
     386:	ff 4f       	sbci	r31, 0xFF	; 255
     388:	24 81       	ldd	r18, Z+4	; 0x04
				servo_orders_table[ servo_servos_table[index].orders_head ].next = 0;
     38a:	16 96       	adiw	r26, 0x06	; 6
     38c:	8c 91       	ld	r24, X
     38e:	16 97       	sbiw	r26, 0x06	; 6
     390:	90 e0       	ldi	r25, 0x00	; 0
     392:	fc 01       	movw	r30, r24
     394:	ee 0f       	add	r30, r30
     396:	ff 1f       	adc	r31, r31
     398:	ee 0f       	add	r30, r30
     39a:	ff 1f       	adc	r31, r31
     39c:	8e 0f       	add	r24, r30
     39e:	9f 1f       	adc	r25, r31
     3a0:	fc 01       	movw	r30, r24
     3a2:	e0 59       	subi	r30, 0x90	; 144
     3a4:	ff 4f       	sbci	r31, 0xFF	; 255
     3a6:	14 82       	std	Z+4, r1	; 0x04
				servo_orders_table[ servo_servos_table[index].orders_head ].barrier = 0;
     3a8:	16 96       	adiw	r26, 0x06	; 6
     3aa:	8c 91       	ld	r24, X
     3ac:	16 97       	sbiw	r26, 0x06	; 6
     3ae:	90 e0       	ldi	r25, 0x00	; 0
     3b0:	fc 01       	movw	r30, r24
     3b2:	ee 0f       	add	r30, r30
     3b4:	ff 1f       	adc	r31, r31
     3b6:	ee 0f       	add	r30, r30
     3b8:	ff 1f       	adc	r31, r31
     3ba:	8e 0f       	add	r24, r30
     3bc:	9f 1f       	adc	r25, r31
     3be:	fc 01       	movw	r30, r24
     3c0:	e0 59       	subi	r30, 0x90	; 144
     3c2:	ff 4f       	sbci	r31, 0xFF	; 255
     3c4:	13 82       	std	Z+3, r1	; 0x03
				servo_orders_table[ servo_servos_table[index].orders_head ].position = 0;
     3c6:	16 96       	adiw	r26, 0x06	; 6
     3c8:	8c 91       	ld	r24, X
     3ca:	16 97       	sbiw	r26, 0x06	; 6
     3cc:	90 e0       	ldi	r25, 0x00	; 0
     3ce:	fc 01       	movw	r30, r24
     3d0:	ee 0f       	add	r30, r30
     3d2:	ff 1f       	adc	r31, r31
     3d4:	ee 0f       	add	r30, r30
     3d6:	ff 1f       	adc	r31, r31
     3d8:	8e 0f       	add	r24, r30
     3da:	9f 1f       	adc	r25, r31
     3dc:	fc 01       	movw	r30, r24
     3de:	e0 59       	subi	r30, 0x90	; 144
     3e0:	ff 4f       	sbci	r31, 0xFF	; 255
     3e2:	12 82       	std	Z+2, r1	; 0x02
     3e4:	11 82       	std	Z+1, r1	; 0x01
				
				servo_servos_table[index].orders_head = temp;
     3e6:	16 96       	adiw	r26, 0x06	; 6
     3e8:	2c 93       	st	X, r18
     3ea:	16 97       	sbiw	r26, 0x06	; 6
				servo_servos_table[index].actual_position = 0;
     3ec:	15 96       	adiw	r26, 0x05	; 5
     3ee:	1c 92       	st	X, r1
     3f0:	1e 92       	st	-X, r1
     3f2:	14 97       	sbiw	r26, 0x04	; 4
				servo_servos_table[index].barrier_delay = 0;
     3f4:	17 96       	adiw	r26, 0x07	; 7
     3f6:	1c 92       	st	X, r1
     3f8:	05 c0       	rjmp	.+10     	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
			}else
				servo_servos_table[index].barrier_delay++;
     3fa:	e8 e6       	ldi	r30, 0x68	; 104
     3fc:	f0 e0       	ldi	r31, 0x00	; 0
     3fe:	87 81       	ldd	r24, Z+7	; 0x07
     400:	8f 5f       	subi	r24, 0xFF	; 255
     402:	87 83       	std	Z+7, r24	; 0x07
		}
	}
}
     404:	ff 91       	pop	r31
     406:	ef 91       	pop	r30
     408:	bf 91       	pop	r27
     40a:	af 91       	pop	r26
     40c:	9f 91       	pop	r25
     40e:	8f 91       	pop	r24
     410:	7f 91       	pop	r23
     412:	6f 91       	pop	r22
     414:	5f 91       	pop	r21
     416:	4f 91       	pop	r20
     418:	3f 91       	pop	r19
     41a:	2f 91       	pop	r18
     41c:	0f 91       	pop	r16
     41e:	ef 90       	pop	r14
     420:	0f 90       	pop	r0
     422:	0f be       	out	0x3f, r0	; 63
     424:	0f 90       	pop	r0
     426:	1f 90       	pop	r1
     428:	18 95       	reti

0000042a <servo_set_servo>:
void servo_set_servo(enum ServoIndexes index_arg, uint16_t value)
{
	if( (servo_servos_table[index_arg].port == &PORTD) && (servo_servos_table[index_arg].pin == PD5) )
     42a:	90 e0       	ldi	r25, 0x00	; 0
     42c:	fc 01       	movw	r30, r24
     42e:	ee 0f       	add	r30, r30
     430:	ff 1f       	adc	r31, r31
     432:	ee 0f       	add	r30, r30
     434:	ff 1f       	adc	r31, r31
     436:	ee 0f       	add	r30, r30
     438:	ff 1f       	adc	r31, r31
     43a:	e8 59       	subi	r30, 0x98	; 152
     43c:	ff 4f       	sbci	r31, 0xFF	; 255
     43e:	21 81       	ldd	r18, Z+1	; 0x01
     440:	32 81       	ldd	r19, Z+2	; 0x02
     442:	22 33       	cpi	r18, 0x32	; 50
     444:	31 05       	cpc	r19, r1
     446:	89 f4       	brne	.+34     	; 0x46a <__stack+0xb>
     448:	88 0f       	add	r24, r24
     44a:	99 1f       	adc	r25, r25
     44c:	88 0f       	add	r24, r24
     44e:	99 1f       	adc	r25, r25
     450:	88 0f       	add	r24, r24
     452:	99 1f       	adc	r25, r25
     454:	fc 01       	movw	r30, r24
     456:	e8 59       	subi	r30, 0x98	; 152
     458:	ff 4f       	sbci	r31, 0xFF	; 255
     45a:	83 81       	ldd	r24, Z+3	; 0x03
     45c:	85 30       	cpi	r24, 0x05	; 5
     45e:	29 f4       	brne	.+10     	; 0x46a <__stack+0xb>
	{
		if(value != 0) OCR1A = value;
     460:	61 15       	cp	r22, r1
     462:	71 05       	cpc	r23, r1
     464:	11 f0       	breq	.+4      	; 0x46a <__stack+0xb>
     466:	7b bd       	out	0x2b, r23	; 43
     468:	6a bd       	out	0x2a, r22	; 42
     46a:	08 95       	ret

0000046c <servo_add_servo>:
	}
}
void servo_add_servo(enum ServoIndexes index_arg, volatile uint8_t* port_arg, uint8_t pin_arg, uint16_t basic_position_arg)
{
	servo_servos_table[index_arg].index = index_arg;
     46c:	e8 2f       	mov	r30, r24
     46e:	f0 e0       	ldi	r31, 0x00	; 0
     470:	ee 0f       	add	r30, r30
     472:	ff 1f       	adc	r31, r31
     474:	ee 0f       	add	r30, r30
     476:	ff 1f       	adc	r31, r31
     478:	ee 0f       	add	r30, r30
     47a:	ff 1f       	adc	r31, r31
     47c:	e8 59       	subi	r30, 0x98	; 152
     47e:	ff 4f       	sbci	r31, 0xFF	; 255
     480:	80 83       	st	Z, r24
	servo_servos_table[index_arg].actual_position = basic_position_arg;
     482:	35 83       	std	Z+5, r19	; 0x05
     484:	24 83       	std	Z+4, r18	; 0x04
	servo_servos_table[index_arg].pin = pin_arg;
     486:	43 83       	std	Z+3, r20	; 0x03
	servo_servos_table[index_arg].port = port_arg;
     488:	72 83       	std	Z+2, r23	; 0x02
     48a:	61 83       	std	Z+1, r22	; 0x01
	servo_servos_table[index_arg].barrier_delay = 0;
     48c:	17 82       	std	Z+7, r1	; 0x07
     48e:	08 95       	ret

00000490 <servo_push_back_order>:
	
}
void servo_push_back_order(enum ServoIndexes index_arg,uint16_t position_arg, uint8_t customer_barrier_arg, uint8_t customer_index_arg, char isServoBarrier)
{
     490:	0f 93       	push	r16
     492:	1f 93       	push	r17
     494:	cf 93       	push	r28
     496:	df 93       	push	r29
     498:	1f 92       	push	r1
     49a:	cd b7       	in	r28, 0x3d	; 61
     49c:	de b7       	in	r29, 0x3e	; 62
	uint8_t offset = 0;
	if(isServoBarrier == 'y')
     49e:	09 37       	cpi	r16, 0x79	; 121
     4a0:	39 f0       	breq	.+14     	; 0x4b0 <servo_push_back_order+0x20>
	}else
	{
		uint8_t j;
		for(j=1;j<STEPPER_ORDERS_TOTAL_NUMBER; j++) //calculate the real barrier 
		{
			if(stepper_motors_orders[j].customer_index == customer_barrier_arg)
     4a2:	90 91 a8 00 	lds	r25, 0x00A8	; 0x8000a8 <stepper_motors_orders+0x6>
     4a6:	94 17       	cp	r25, r20
     4a8:	09 f4       	brne	.+2      	; 0x4ac <servo_push_back_order+0x1c>
     4aa:	d4 c0       	rjmp	.+424    	; 0x654 <servo_push_back_order+0x1c4>
     4ac:	92 e0       	ldi	r25, 0x02	; 2
     4ae:	29 c0       	rjmp	.+82     	; 0x502 <servo_push_back_order+0x72>
	{
		uint8_t j;
		offset = STEPPER_ORDERS_TOTAL_NUMBER; //still dont know what im doing here
		for(j=1;j<SERVO_ORDERS_TOTAL_NUMBER; j++) //calculate the real barrier
		{
			if(servo_orders_table[j].customer_index == customer_barrier_arg)
     4b0:	90 91 75 00 	lds	r25, 0x0075	; 0x800075 <servo_orders_table+0x5>
     4b4:	94 17       	cp	r25, r20
     4b6:	09 f4       	brne	.+2      	; 0x4ba <servo_push_back_order+0x2a>
     4b8:	c8 c0       	rjmp	.+400    	; 0x64a <servo_push_back_order+0x1ba>
     4ba:	e2 e0       	ldi	r30, 0x02	; 2
     4bc:	f0 e0       	ldi	r31, 0x00	; 0
     4be:	9e 2f       	mov	r25, r30
     4c0:	df 01       	movw	r26, r30
     4c2:	aa 0f       	add	r26, r26
     4c4:	bb 1f       	adc	r27, r27
     4c6:	aa 0f       	add	r26, r26
     4c8:	bb 1f       	adc	r27, r27
     4ca:	ae 0f       	add	r26, r30
     4cc:	bf 1f       	adc	r27, r31
     4ce:	a0 59       	subi	r26, 0x90	; 144
     4d0:	bf 4f       	sbci	r27, 0xFF	; 255
     4d2:	3c 91       	ld	r19, X
     4d4:	34 13       	cpse	r19, r20
     4d6:	07 c0       	rjmp	.+14     	; 0x4e6 <servo_push_back_order+0x56>
			{
				if(customer_barrier_arg != 0) customer_barrier_arg = j;
     4d8:	44 23       	and	r20, r20
     4da:	69 f0       	breq	.+26     	; 0x4f6 <servo_push_back_order+0x66>
     4dc:	01 c0       	rjmp	.+2      	; 0x4e0 <servo_push_back_order+0x50>
     4de:	91 e0       	ldi	r25, 0x01	; 1
     4e0:	49 2f       	mov	r20, r25
{
	uint8_t offset = 0;
	if(isServoBarrier == 'y')
	{
		uint8_t j;
		offset = STEPPER_ORDERS_TOTAL_NUMBER; //still dont know what im doing here
     4e2:	50 e8       	ldi	r21, 0x80	; 128
     4e4:	09 c0       	rjmp	.+18     	; 0x4f8 <servo_push_back_order+0x68>
     4e6:	91 e0       	ldi	r25, 0x01	; 1
     4e8:	9e 0f       	add	r25, r30
     4ea:	31 96       	adiw	r30, 0x01	; 1
		for(j=1;j<SERVO_ORDERS_TOTAL_NUMBER; j++) //calculate the real barrier
     4ec:	ea 30       	cpi	r30, 0x0A	; 10
     4ee:	f1 05       	cpc	r31, r1
     4f0:	31 f7       	brne	.-52     	; 0x4be <servo_push_back_order+0x2e>
{
	uint8_t offset = 0;
	if(isServoBarrier == 'y')
	{
		uint8_t j;
		offset = STEPPER_ORDERS_TOTAL_NUMBER; //still dont know what im doing here
     4f2:	50 e8       	ldi	r21, 0x80	; 128
     4f4:	01 c0       	rjmp	.+2      	; 0x4f8 <servo_push_back_order+0x68>
		{
			if(servo_orders_table[j].customer_index == customer_barrier_arg)
			{
				if(customer_barrier_arg != 0) customer_barrier_arg = j;
				else 
					offset = 0;
     4f6:	50 e0       	ldi	r21, 0x00	; 0
				break;
			}
		}
		if(j == SERVO_ORDERS_TOTAL_NUMBER) { offset = 0; customer_barrier_arg = 0; }
     4f8:	9a 30       	cpi	r25, 0x0A	; 10
     4fa:	f9 f4       	brne	.+62     	; 0x53a <servo_push_back_order+0xaa>
     4fc:	50 e0       	ldi	r21, 0x00	; 0
     4fe:	40 e0       	ldi	r20, 0x00	; 0
     500:	1c c0       	rjmp	.+56     	; 0x53a <servo_push_back_order+0xaa>
	}else
	{
		uint8_t j;
		for(j=1;j<STEPPER_ORDERS_TOTAL_NUMBER; j++) //calculate the real barrier 
		{
			if(stepper_motors_orders[j].customer_index == customer_barrier_arg)
     502:	e9 2f       	mov	r30, r25
     504:	f0 e0       	ldi	r31, 0x00	; 0
     506:	df 01       	movw	r26, r30
     508:	aa 0f       	add	r26, r26
     50a:	bb 1f       	adc	r27, r27
     50c:	ea 0f       	add	r30, r26
     50e:	fb 1f       	adc	r31, r27
     510:	ee 0f       	add	r30, r30
     512:	ff 1f       	adc	r31, r31
     514:	ee 55       	subi	r30, 0x5E	; 94
     516:	ff 4f       	sbci	r31, 0xFF	; 255
     518:	30 81       	ld	r19, Z
     51a:	34 13       	cpse	r19, r20
     51c:	06 c0       	rjmp	.+12     	; 0x52a <servo_push_back_order+0x9a>
			{
				if(customer_barrier_arg != 0) customer_barrier_arg = j;
     51e:	44 23       	and	r20, r20
     520:	31 f0       	breq	.+12     	; 0x52e <servo_push_back_order+0x9e>
     522:	01 c0       	rjmp	.+2      	; 0x526 <servo_push_back_order+0x96>
     524:	91 e0       	ldi	r25, 0x01	; 1
     526:	49 2f       	mov	r20, r25
     528:	02 c0       	rjmp	.+4      	; 0x52e <servo_push_back_order+0x9e>
		}
		if(j == SERVO_ORDERS_TOTAL_NUMBER) { offset = 0; customer_barrier_arg = 0; }
	}else
	{
		uint8_t j;
		for(j=1;j<STEPPER_ORDERS_TOTAL_NUMBER; j++) //calculate the real barrier 
     52a:	9f 5f       	subi	r25, 0xFF	; 255
     52c:	52 f7       	brpl	.-44     	; 0x502 <servo_push_back_order+0x72>
				else
					offset = 0;
				break;
			}	
		}
		if(j == STEPPER_ORDERS_TOTAL_NUMBER) { offset = 0; customer_barrier_arg = 0; }
     52e:	90 38       	cpi	r25, 0x80	; 128
     530:	19 f4       	brne	.+6      	; 0x538 <servo_push_back_order+0xa8>
     532:	50 e0       	ldi	r21, 0x00	; 0
     534:	40 e0       	ldi	r20, 0x00	; 0
     536:	01 c0       	rjmp	.+2      	; 0x53a <servo_push_back_order+0xaa>
     538:	50 e0       	ldi	r21, 0x00	; 0
	}
	uint8_t i;
	for(i = 1;i<SERVO_ORDERS_TOTAL_NUMBER; i++)
	{
		if(servo_orders_table[i].position == 0)
     53a:	e0 91 76 00 	lds	r30, 0x0076	; 0x800076 <servo_orders_table+0x6>
     53e:	f0 91 77 00 	lds	r31, 0x0077	; 0x800077 <servo_orders_table+0x7>
     542:	ef 2b       	or	r30, r31
     544:	a1 f0       	breq	.+40     	; 0x56e <servo_push_back_order+0xde>
     546:	e2 e0       	ldi	r30, 0x02	; 2
     548:	f0 e0       	ldi	r31, 0x00	; 0
     54a:	3e 2f       	mov	r19, r30
     54c:	8f 01       	movw	r16, r30
     54e:	df 01       	movw	r26, r30
     550:	aa 0f       	add	r26, r26
     552:	bb 1f       	adc	r27, r27
     554:	aa 0f       	add	r26, r26
     556:	bb 1f       	adc	r27, r27
     558:	ae 0f       	add	r26, r30
     55a:	bf 1f       	adc	r27, r31
     55c:	a0 59       	subi	r26, 0x90	; 144
     55e:	bf 4f       	sbci	r27, 0xFF	; 255
     560:	11 96       	adiw	r26, 0x01	; 1
     562:	0d 90       	ld	r0, X+
     564:	bc 91       	ld	r27, X
     566:	a0 2d       	mov	r26, r0
     568:	ab 2b       	or	r26, r27
     56a:	a9 f4       	brne	.+42     	; 0x596 <servo_push_back_order+0x106>
     56c:	03 c0       	rjmp	.+6      	; 0x574 <servo_push_back_order+0xe4>
     56e:	01 e0       	ldi	r16, 0x01	; 1
     570:	10 e0       	ldi	r17, 0x00	; 0
			}	
		}
		if(j == STEPPER_ORDERS_TOTAL_NUMBER) { offset = 0; customer_barrier_arg = 0; }
	}
	uint8_t i;
	for(i = 1;i<SERVO_ORDERS_TOTAL_NUMBER; i++)
     572:	31 e0       	ldi	r19, 0x01	; 1
	{
		if(servo_orders_table[i].position == 0)
		{
			servo_orders_table[i].position = position_arg;
     574:	f8 01       	movw	r30, r16
     576:	ee 0f       	add	r30, r30
     578:	ff 1f       	adc	r31, r31
     57a:	ee 0f       	add	r30, r30
     57c:	ff 1f       	adc	r31, r31
     57e:	0e 0f       	add	r16, r30
     580:	1f 1f       	adc	r17, r31
     582:	f8 01       	movw	r30, r16
     584:	e0 59       	subi	r30, 0x90	; 144
     586:	ff 4f       	sbci	r31, 0xFF	; 255
     588:	72 83       	std	Z+2, r23	; 0x02
     58a:	61 83       	std	Z+1, r22	; 0x01
			servo_orders_table[i].customer_index = customer_index_arg;
     58c:	20 83       	st	Z, r18
			servo_orders_table[i].next = 0;
     58e:	14 82       	std	Z+4, r1	; 0x04
			servo_orders_table[i].barrier = customer_barrier_arg + offset; //here its not customers barrier
     590:	45 0f       	add	r20, r21
     592:	43 83       	std	Z+3, r20	; 0x03
			break;
     594:	06 c0       	rjmp	.+12     	; 0x5a2 <servo_push_back_order+0x112>
     596:	31 e0       	ldi	r19, 0x01	; 1
     598:	3e 0f       	add	r19, r30
     59a:	31 96       	adiw	r30, 0x01	; 1
			}	
		}
		if(j == STEPPER_ORDERS_TOTAL_NUMBER) { offset = 0; customer_barrier_arg = 0; }
	}
	uint8_t i;
	for(i = 1;i<SERVO_ORDERS_TOTAL_NUMBER; i++)
     59c:	ea 30       	cpi	r30, 0x0A	; 10
     59e:	f1 05       	cpc	r31, r1
     5a0:	a1 f6       	brne	.-88     	; 0x54a <servo_push_back_order+0xba>
			servo_orders_table[i].next = 0;
			servo_orders_table[i].barrier = customer_barrier_arg + offset; //here its not customers barrier
			break;
		}
	}	
	volatile uint8_t temp = servo_servos_table[index_arg].orders_head;
     5a2:	90 e0       	ldi	r25, 0x00	; 0
     5a4:	fc 01       	movw	r30, r24
     5a6:	ee 0f       	add	r30, r30
     5a8:	ff 1f       	adc	r31, r31
     5aa:	ee 0f       	add	r30, r30
     5ac:	ff 1f       	adc	r31, r31
     5ae:	ee 0f       	add	r30, r30
     5b0:	ff 1f       	adc	r31, r31
     5b2:	e8 59       	subi	r30, 0x98	; 152
     5b4:	ff 4f       	sbci	r31, 0xFF	; 255
     5b6:	26 81       	ldd	r18, Z+6	; 0x06
     5b8:	29 83       	std	Y+1, r18	; 0x01
	if(temp != 0)
     5ba:	29 81       	ldd	r18, Y+1	; 0x01
     5bc:	22 23       	and	r18, r18
     5be:	d1 f1       	breq	.+116    	; 0x634 <servo_push_back_order+0x1a4>
	{
		while(servo_orders_table[temp].next != 0) temp = servo_orders_table[temp].next;
     5c0:	89 81       	ldd	r24, Y+1	; 0x01
     5c2:	90 e0       	ldi	r25, 0x00	; 0
     5c4:	fc 01       	movw	r30, r24
     5c6:	ee 0f       	add	r30, r30
     5c8:	ff 1f       	adc	r31, r31
     5ca:	ee 0f       	add	r30, r30
     5cc:	ff 1f       	adc	r31, r31
     5ce:	8e 0f       	add	r24, r30
     5d0:	9f 1f       	adc	r25, r31
     5d2:	fc 01       	movw	r30, r24
     5d4:	e0 59       	subi	r30, 0x90	; 144
     5d6:	ff 4f       	sbci	r31, 0xFF	; 255
     5d8:	84 81       	ldd	r24, Z+4	; 0x04
     5da:	88 23       	and	r24, r24
     5dc:	e9 f0       	breq	.+58     	; 0x618 <servo_push_back_order+0x188>
     5de:	89 81       	ldd	r24, Y+1	; 0x01
     5e0:	90 e0       	ldi	r25, 0x00	; 0
     5e2:	fc 01       	movw	r30, r24
     5e4:	ee 0f       	add	r30, r30
     5e6:	ff 1f       	adc	r31, r31
     5e8:	ee 0f       	add	r30, r30
     5ea:	ff 1f       	adc	r31, r31
     5ec:	8e 0f       	add	r24, r30
     5ee:	9f 1f       	adc	r25, r31
     5f0:	fc 01       	movw	r30, r24
     5f2:	e0 59       	subi	r30, 0x90	; 144
     5f4:	ff 4f       	sbci	r31, 0xFF	; 255
     5f6:	84 81       	ldd	r24, Z+4	; 0x04
     5f8:	89 83       	std	Y+1, r24	; 0x01
     5fa:	89 81       	ldd	r24, Y+1	; 0x01
     5fc:	90 e0       	ldi	r25, 0x00	; 0
     5fe:	fc 01       	movw	r30, r24
     600:	ee 0f       	add	r30, r30
     602:	ff 1f       	adc	r31, r31
     604:	ee 0f       	add	r30, r30
     606:	ff 1f       	adc	r31, r31
     608:	8e 0f       	add	r24, r30
     60a:	9f 1f       	adc	r25, r31
     60c:	fc 01       	movw	r30, r24
     60e:	e0 59       	subi	r30, 0x90	; 144
     610:	ff 4f       	sbci	r31, 0xFF	; 255
     612:	84 81       	ldd	r24, Z+4	; 0x04
     614:	81 11       	cpse	r24, r1
     616:	e3 cf       	rjmp	.-58     	; 0x5de <servo_push_back_order+0x14e>
		servo_orders_table[temp].next = i;
     618:	89 81       	ldd	r24, Y+1	; 0x01
     61a:	90 e0       	ldi	r25, 0x00	; 0
     61c:	fc 01       	movw	r30, r24
     61e:	ee 0f       	add	r30, r30
     620:	ff 1f       	adc	r31, r31
     622:	ee 0f       	add	r30, r30
     624:	ff 1f       	adc	r31, r31
     626:	8e 0f       	add	r24, r30
     628:	9f 1f       	adc	r25, r31
     62a:	fc 01       	movw	r30, r24
     62c:	e0 59       	subi	r30, 0x90	; 144
     62e:	ff 4f       	sbci	r31, 0xFF	; 255
     630:	34 83       	std	Z+4, r19	; 0x04
     632:	15 c0       	rjmp	.+42     	; 0x65e <servo_push_back_order+0x1ce>
	}else
		{
			servo_servos_table[index_arg].orders_head = i;
     634:	88 0f       	add	r24, r24
     636:	99 1f       	adc	r25, r25
     638:	88 0f       	add	r24, r24
     63a:	99 1f       	adc	r25, r25
     63c:	88 0f       	add	r24, r24
     63e:	99 1f       	adc	r25, r25
     640:	fc 01       	movw	r30, r24
     642:	e8 59       	subi	r30, 0x98	; 152
     644:	ff 4f       	sbci	r31, 0xFF	; 255
     646:	36 83       	std	Z+6, r19	; 0x06
     648:	0a c0       	rjmp	.+20     	; 0x65e <servo_push_back_order+0x1ce>
		offset = STEPPER_ORDERS_TOTAL_NUMBER; //still dont know what im doing here
		for(j=1;j<SERVO_ORDERS_TOTAL_NUMBER; j++) //calculate the real barrier
		{
			if(servo_orders_table[j].customer_index == customer_barrier_arg)
			{
				if(customer_barrier_arg != 0) customer_barrier_arg = j;
     64a:	91 11       	cpse	r25, r1
     64c:	48 cf       	rjmp	.-368    	; 0x4de <servo_push_back_order+0x4e>
				else 
					offset = 0;
     64e:	50 e0       	ldi	r21, 0x00	; 0
		offset = STEPPER_ORDERS_TOTAL_NUMBER; //still dont know what im doing here
		for(j=1;j<SERVO_ORDERS_TOTAL_NUMBER; j++) //calculate the real barrier
		{
			if(servo_orders_table[j].customer_index == customer_barrier_arg)
			{
				if(customer_barrier_arg != 0) customer_barrier_arg = j;
     650:	40 e0       	ldi	r20, 0x00	; 0
     652:	73 cf       	rjmp	.-282    	; 0x53a <servo_push_back_order+0xaa>
		uint8_t j;
		for(j=1;j<STEPPER_ORDERS_TOTAL_NUMBER; j++) //calculate the real barrier 
		{
			if(stepper_motors_orders[j].customer_index == customer_barrier_arg)
			{
				if(customer_barrier_arg != 0) customer_barrier_arg = j;
     654:	91 11       	cpse	r25, r1
     656:	66 cf       	rjmp	.-308    	; 0x524 <servo_push_back_order+0x94>
     658:	50 e0       	ldi	r21, 0x00	; 0
     65a:	40 e0       	ldi	r20, 0x00	; 0
     65c:	6e cf       	rjmp	.-292    	; 0x53a <servo_push_back_order+0xaa>
		servo_orders_table[temp].next = i;
	}else
		{
			servo_servos_table[index_arg].orders_head = i;
		}	
}
     65e:	0f 90       	pop	r0
     660:	df 91       	pop	r29
     662:	cf 91       	pop	r28
     664:	1f 91       	pop	r17
     666:	0f 91       	pop	r16
     668:	08 95       	ret

0000066a <servo_process_servo>:
void servo_process_servo(enum ServoIndexes index_arg)
{
     66a:	cf 93       	push	r28
     66c:	df 93       	push	r29
	uint8_t temp = servo_orders_table[ servo_servos_table[index_arg].orders_head ].barrier;
     66e:	48 2f       	mov	r20, r24
     670:	50 e0       	ldi	r21, 0x00	; 0
     672:	fa 01       	movw	r30, r20
     674:	ee 0f       	add	r30, r30
     676:	ff 1f       	adc	r31, r31
     678:	ee 0f       	add	r30, r30
     67a:	ff 1f       	adc	r31, r31
     67c:	ee 0f       	add	r30, r30
     67e:	ff 1f       	adc	r31, r31
     680:	e8 59       	subi	r30, 0x98	; 152
     682:	ff 4f       	sbci	r31, 0xFF	; 255
     684:	26 81       	ldd	r18, Z+6	; 0x06
     686:	30 e0       	ldi	r19, 0x00	; 0
     688:	f9 01       	movw	r30, r18
     68a:	ee 0f       	add	r30, r30
     68c:	ff 1f       	adc	r31, r31
     68e:	ee 0f       	add	r30, r30
     690:	ff 1f       	adc	r31, r31
     692:	2e 0f       	add	r18, r30
     694:	3f 1f       	adc	r19, r31
     696:	f9 01       	movw	r30, r18
     698:	e0 59       	subi	r30, 0x90	; 144
     69a:	ff 4f       	sbci	r31, 0xFF	; 255
     69c:	23 81       	ldd	r18, Z+3	; 0x03
	
	if(temp > STEPPER_ORDERS_TOTAL_NUMBER)
     69e:	21 38       	cpi	r18, 0x81	; 129
     6a0:	d8 f0       	brcs	.+54     	; 0x6d8 <servo_process_servo+0x6e>
	{
		 temp -= STEPPER_ORDERS_TOTAL_NUMBER;
     6a2:	20 58       	subi	r18, 0x80	; 128
		 temp = servo_orders_table[ servo_orders_table[temp].barrier ].position;
     6a4:	30 e0       	ldi	r19, 0x00	; 0
     6a6:	f9 01       	movw	r30, r18
     6a8:	ee 0f       	add	r30, r30
     6aa:	ff 1f       	adc	r31, r31
     6ac:	ee 0f       	add	r30, r30
     6ae:	ff 1f       	adc	r31, r31
     6b0:	2e 0f       	add	r18, r30
     6b2:	3f 1f       	adc	r19, r31
     6b4:	f9 01       	movw	r30, r18
     6b6:	e0 59       	subi	r30, 0x90	; 144
     6b8:	ff 4f       	sbci	r31, 0xFF	; 255
     6ba:	23 81       	ldd	r18, Z+3	; 0x03
     6bc:	30 e0       	ldi	r19, 0x00	; 0
     6be:	f9 01       	movw	r30, r18
     6c0:	ee 0f       	add	r30, r30
     6c2:	ff 1f       	adc	r31, r31
     6c4:	ee 0f       	add	r30, r30
     6c6:	ff 1f       	adc	r31, r31
     6c8:	2e 0f       	add	r18, r30
     6ca:	3f 1f       	adc	r19, r31
     6cc:	f9 01       	movw	r30, r18
     6ce:	e0 59       	subi	r30, 0x90	; 144
     6d0:	ff 4f       	sbci	r31, 0xFF	; 255
     6d2:	21 81       	ldd	r18, Z+1	; 0x01
     6d4:	32 81       	ldd	r19, Z+2	; 0x02
     6d6:	1a c0       	rjmp	.+52     	; 0x70c <servo_process_servo+0xa2>
	 }else
	{
		if(temp != 0) temp = stepper_motors_orders[ servo_orders_table[temp].barrier ].move;
     6d8:	22 23       	and	r18, r18
     6da:	d1 f0       	breq	.+52     	; 0x710 <servo_process_servo+0xa6>
     6dc:	30 e0       	ldi	r19, 0x00	; 0
     6de:	f9 01       	movw	r30, r18
     6e0:	ee 0f       	add	r30, r30
     6e2:	ff 1f       	adc	r31, r31
     6e4:	ee 0f       	add	r30, r30
     6e6:	ff 1f       	adc	r31, r31
     6e8:	2e 0f       	add	r18, r30
     6ea:	3f 1f       	adc	r19, r31
     6ec:	f9 01       	movw	r30, r18
     6ee:	e0 59       	subi	r30, 0x90	; 144
     6f0:	ff 4f       	sbci	r31, 0xFF	; 255
     6f2:	23 81       	ldd	r18, Z+3	; 0x03
     6f4:	30 e0       	ldi	r19, 0x00	; 0
     6f6:	f9 01       	movw	r30, r18
     6f8:	ee 0f       	add	r30, r30
     6fa:	ff 1f       	adc	r31, r31
     6fc:	e2 0f       	add	r30, r18
     6fe:	f3 1f       	adc	r31, r19
     700:	ee 0f       	add	r30, r30
     702:	ff 1f       	adc	r31, r31
     704:	ee 55       	subi	r30, 0x5E	; 94
     706:	ff 4f       	sbci	r31, 0xFF	; 255
     708:	22 81       	ldd	r18, Z+2	; 0x02
     70a:	33 81       	ldd	r19, Z+3	; 0x03
	}
	
	if( (temp == 0) && (servo_servos_table[index_arg].barrier_delay == 0) )
     70c:	21 11       	cpse	r18, r1
     70e:	23 c0       	rjmp	.+70     	; 0x756 <servo_process_servo+0xec>
     710:	fa 01       	movw	r30, r20
     712:	ee 0f       	add	r30, r30
     714:	ff 1f       	adc	r31, r31
     716:	ee 0f       	add	r30, r30
     718:	ff 1f       	adc	r31, r31
     71a:	ee 0f       	add	r30, r30
     71c:	ff 1f       	adc	r31, r31
     71e:	e8 59       	subi	r30, 0x98	; 152
     720:	ff 4f       	sbci	r31, 0xFF	; 255
     722:	97 81       	ldd	r25, Z+7	; 0x07
     724:	91 11       	cpse	r25, r1
     726:	17 c0       	rjmp	.+46     	; 0x756 <servo_process_servo+0xec>
	{
		servo_servos_table[index_arg].actual_position = servo_orders_table[ servo_servos_table[index_arg].orders_head ].position;
     728:	ef 01       	movw	r28, r30
     72a:	26 81       	ldd	r18, Z+6	; 0x06
     72c:	30 e0       	ldi	r19, 0x00	; 0
     72e:	f9 01       	movw	r30, r18
     730:	ee 0f       	add	r30, r30
     732:	ff 1f       	adc	r31, r31
     734:	ee 0f       	add	r30, r30
     736:	ff 1f       	adc	r31, r31
     738:	2e 0f       	add	r18, r30
     73a:	3f 1f       	adc	r19, r31
     73c:	f9 01       	movw	r30, r18
     73e:	e0 59       	subi	r30, 0x90	; 144
     740:	ff 4f       	sbci	r31, 0xFF	; 255
     742:	21 81       	ldd	r18, Z+1	; 0x01
     744:	32 81       	ldd	r19, Z+2	; 0x02
     746:	3d 83       	std	Y+5, r19	; 0x05
     748:	2c 83       	std	Y+4, r18	; 0x04
		servo_set_servo(index_arg,servo_servos_table[index_arg].actual_position);
     74a:	6c 81       	ldd	r22, Y+4	; 0x04
     74c:	7d 81       	ldd	r23, Y+5	; 0x05
     74e:	0e 94 15 02 	call	0x42a	; 0x42a <servo_set_servo>
		
		servo_servos_table[index_arg].barrier_delay = 1;
     752:	81 e0       	ldi	r24, 0x01	; 1
     754:	8f 83       	std	Y+7, r24	; 0x07
	}
     756:	df 91       	pop	r29
     758:	cf 91       	pop	r28
     75a:	08 95       	ret

0000075c <stepper_add_motor>:
	stepper_motors_table[index_arg].speed = 0xFF;
	stepper_motors_table[index_arg].limit = 108; // If faster (lower number), the motor wont move
}
void stepper_set_speed(enum StepperIndexes index_arg, uint8_t speed_arg)
{
	stepper_motors_table[index_arg].limit = speed_arg;
     75c:	9b e0       	ldi	r25, 0x0B	; 11
     75e:	89 9f       	mul	r24, r25
     760:	f0 01       	movw	r30, r0
     762:	11 24       	eor	r1, r1
     764:	ee 55       	subi	r30, 0x5E	; 94
     766:	fc 4f       	sbci	r31, 0xFC	; 252
     768:	80 83       	st	Z, r24
     76a:	72 83       	std	Z+2, r23	; 0x02
     76c:	61 83       	std	Z+1, r22	; 0x01
     76e:	43 83       	std	Z+3, r20	; 0x03
     770:	10 86       	std	Z+8, r1	; 0x08
     772:	17 82       	std	Z+7, r1	; 0x07
     774:	8f ef       	ldi	r24, 0xFF	; 255
     776:	84 83       	std	Z+4, r24	; 0x04
     778:	8c e6       	ldi	r24, 0x6C	; 108
     77a:	82 87       	std	Z+10, r24	; 0x0a
     77c:	08 95       	ret

0000077e <stepper_init>:
}
void stepper_init()
{	
	TIMSK |= (1<<TOIE0);
     77e:	89 b7       	in	r24, 0x39	; 57
     780:	81 60       	ori	r24, 0x01	; 1
     782:	89 bf       	out	0x39, r24	; 57
	TCNT0 = 1;
     784:	81 e0       	ldi	r24, 0x01	; 1
     786:	82 bf       	out	0x32, r24	; 50
	TCCR0 |= (1<<CS00); //interrupts and no prescaler so up to <<< 255 instructions
     788:	83 b7       	in	r24, 0x33	; 51
     78a:	81 60       	ori	r24, 0x01	; 1
     78c:	83 bf       	out	0x33, r24	; 51
	
	sei();
     78e:	78 94       	sei
     790:	08 95       	ret

00000792 <stepper_fastest_and_init_motors>:
		stepper_motors_table[index_arg].step++;
	
	if( stepper_motors_table[index_arg].speed > stepper_motors_table[index_arg].limit ) stepper_motors_table[index_arg].speed--; //limit and speed a little inconsistent namespace
}
void stepper_fastest_and_init_motors()
{
     792:	80 e0       	ldi	r24, 0x00	; 0
     794:	90 e0       	ldi	r25, 0x00	; 0
	uint8_t fastest_speed = 255;
     796:	6f ef       	ldi	r22, 0xFF	; 255
	for(uint8_t index = 0; index < STEPPER_NUM_OF_MOTORS; index++)
	{
		if( stepper_motors_table[index].speed < fastest_speed )
     798:	2b e0       	ldi	r18, 0x0B	; 11
     79a:	ac 01       	movw	r20, r24
     79c:	28 9f       	mul	r18, r24
     79e:	f0 01       	movw	r30, r0
     7a0:	29 9f       	mul	r18, r25
     7a2:	f0 0d       	add	r31, r0
     7a4:	11 24       	eor	r1, r1
     7a6:	ee 55       	subi	r30, 0x5E	; 94
     7a8:	fc 4f       	sbci	r31, 0xFC	; 252
     7aa:	34 81       	ldd	r19, Z+4	; 0x04
     7ac:	36 17       	cp	r19, r22
     7ae:	40 f4       	brcc	.+16     	; 0x7c0 <stepper_fastest_and_init_motors+0x2e>
		{
			fastest_speed = stepper_motors_table[index].speed;
     7b0:	28 9f       	mul	r18, r24
     7b2:	f0 01       	movw	r30, r0
     7b4:	29 9f       	mul	r18, r25
     7b6:	f0 0d       	add	r31, r0
     7b8:	11 24       	eor	r1, r1
     7ba:	ee 55       	subi	r30, 0x5E	; 94
     7bc:	fc 4f       	sbci	r31, 0xFC	; 252
     7be:	64 81       	ldd	r22, Z+4	; 0x04
		}
		stepper_motors_table[index].orders_head = 0;
     7c0:	24 9f       	mul	r18, r20
     7c2:	f0 01       	movw	r30, r0
     7c4:	25 9f       	mul	r18, r21
     7c6:	f0 0d       	add	r31, r0
     7c8:	11 24       	eor	r1, r1
     7ca:	ee 55       	subi	r30, 0x5E	; 94
     7cc:	fc 4f       	sbci	r31, 0xFC	; 252
     7ce:	15 82       	std	Z+5, r1	; 0x05
		stepper_motors_table[index].timer = 0;
     7d0:	16 82       	std	Z+6, r1	; 0x06
     7d2:	01 96       	adiw	r24, 0x01	; 1
	if( stepper_motors_table[index_arg].speed > stepper_motors_table[index_arg].limit ) stepper_motors_table[index_arg].speed--; //limit and speed a little inconsistent namespace
}
void stepper_fastest_and_init_motors()
{
	uint8_t fastest_speed = 255;
	for(uint8_t index = 0; index < STEPPER_NUM_OF_MOTORS; index++)
     7d4:	84 30       	cpi	r24, 0x04	; 4
     7d6:	91 05       	cpc	r25, r1
     7d8:	01 f7       	brne	.-64     	; 0x79a <stepper_fastest_and_init_motors+0x8>
     7da:	20 e0       	ldi	r18, 0x00	; 0
     7dc:	30 e0       	ldi	r19, 0x00	; 0
	fastest_speed = fastest_speed;
	
	for(uint8_t i = 0; i < STEPPER_ORDERS_TOTAL_NUMBER; i++)
	{
		stepper_motors_orders[i].barrier = 0;
		stepper_motors_orders[i].direction = UNDEFINED;
     7de:	42 e0       	ldi	r20, 0x02	; 2
	}
	fastest_speed = fastest_speed;
	
	for(uint8_t i = 0; i < STEPPER_ORDERS_TOTAL_NUMBER; i++)
	{
		stepper_motors_orders[i].barrier = 0;
     7e0:	c9 01       	movw	r24, r18
     7e2:	88 0f       	add	r24, r24
     7e4:	99 1f       	adc	r25, r25
     7e6:	fc 01       	movw	r30, r24
     7e8:	e2 0f       	add	r30, r18
     7ea:	f3 1f       	adc	r31, r19
     7ec:	ee 0f       	add	r30, r30
     7ee:	ff 1f       	adc	r31, r31
     7f0:	ee 55       	subi	r30, 0x5E	; 94
     7f2:	ff 4f       	sbci	r31, 0xFF	; 255
     7f4:	14 82       	std	Z+4, r1	; 0x04
		stepper_motors_orders[i].direction = UNDEFINED;
     7f6:	41 83       	std	Z+1, r20	; 0x01
		stepper_motors_orders[i].customer_index = 0;
     7f8:	10 82       	st	Z, r1
		stepper_motors_orders[i].move = 0;
     7fa:	13 82       	std	Z+3, r1	; 0x03
     7fc:	12 82       	std	Z+2, r1	; 0x02
		stepper_motors_orders[i].next = 0;
     7fe:	fc 01       	movw	r30, r24
     800:	e2 0f       	add	r30, r18
     802:	f3 1f       	adc	r31, r19
     804:	ee 0f       	add	r30, r30
     806:	ff 1f       	adc	r31, r31
     808:	ee 55       	subi	r30, 0x5E	; 94
     80a:	ff 4f       	sbci	r31, 0xFF	; 255
     80c:	15 82       	std	Z+5, r1	; 0x05
     80e:	2f 5f       	subi	r18, 0xFF	; 255
     810:	3f 4f       	sbci	r19, 0xFF	; 255
		stepper_motors_table[index].orders_head = 0;
		stepper_motors_table[index].timer = 0;
	}
	fastest_speed = fastest_speed;
	
	for(uint8_t i = 0; i < STEPPER_ORDERS_TOTAL_NUMBER; i++)
     812:	20 38       	cpi	r18, 0x80	; 128
     814:	31 05       	cpc	r19, r1
     816:	21 f7       	brne	.-56     	; 0x7e0 <stepper_fastest_and_init_motors+0x4e>
		stepper_motors_orders[i].direction = UNDEFINED;
		stepper_motors_orders[i].customer_index = 0;
		stepper_motors_orders[i].move = 0;
		stepper_motors_orders[i].next = 0;
	}
}
     818:	08 95       	ret

0000081a <stepper_pop_front_order>:

void stepper_pop_front_order(uint8_t index_arg)
{
     81a:	cf 93       	push	r28
     81c:	df 93       	push	r29
     81e:	1f 92       	push	r1
     820:	cd b7       	in	r28, 0x3d	; 61
     822:	de b7       	in	r29, 0x3e	; 62
	volatile uint8_t temp = stepper_motors_table[index_arg].orders_head;
     824:	28 2f       	mov	r18, r24
     826:	30 e0       	ldi	r19, 0x00	; 0
     828:	9b e0       	ldi	r25, 0x0B	; 11
     82a:	89 9f       	mul	r24, r25
     82c:	f0 01       	movw	r30, r0
     82e:	11 24       	eor	r1, r1
     830:	ee 55       	subi	r30, 0x5E	; 94
     832:	fc 4f       	sbci	r31, 0xFC	; 252
     834:	85 81       	ldd	r24, Z+5	; 0x05
     836:	89 83       	std	Y+1, r24	; 0x01
	stepper_motors_orders[temp].move = 0;
     838:	89 81       	ldd	r24, Y+1	; 0x01
     83a:	90 e0       	ldi	r25, 0x00	; 0
     83c:	fc 01       	movw	r30, r24
     83e:	ee 0f       	add	r30, r30
     840:	ff 1f       	adc	r31, r31
     842:	e8 0f       	add	r30, r24
     844:	f9 1f       	adc	r31, r25
     846:	ee 0f       	add	r30, r30
     848:	ff 1f       	adc	r31, r31
     84a:	ee 55       	subi	r30, 0x5E	; 94
     84c:	ff 4f       	sbci	r31, 0xFF	; 255
     84e:	13 82       	std	Z+3, r1	; 0x03
     850:	12 82       	std	Z+2, r1	; 0x02
	stepper_motors_orders[temp].barrier = 0;
     852:	89 81       	ldd	r24, Y+1	; 0x01
     854:	90 e0       	ldi	r25, 0x00	; 0
     856:	fc 01       	movw	r30, r24
     858:	ee 0f       	add	r30, r30
     85a:	ff 1f       	adc	r31, r31
     85c:	e8 0f       	add	r30, r24
     85e:	f9 1f       	adc	r31, r25
     860:	ee 0f       	add	r30, r30
     862:	ff 1f       	adc	r31, r31
     864:	ee 55       	subi	r30, 0x5E	; 94
     866:	ff 4f       	sbci	r31, 0xFF	; 255
     868:	14 82       	std	Z+4, r1	; 0x04
	stepper_motors_orders[temp].direction = UNDEFINED;
     86a:	89 81       	ldd	r24, Y+1	; 0x01
     86c:	90 e0       	ldi	r25, 0x00	; 0
     86e:	fc 01       	movw	r30, r24
     870:	ee 0f       	add	r30, r30
     872:	ff 1f       	adc	r31, r31
     874:	e8 0f       	add	r30, r24
     876:	f9 1f       	adc	r31, r25
     878:	ee 0f       	add	r30, r30
     87a:	ff 1f       	adc	r31, r31
     87c:	ee 55       	subi	r30, 0x5E	; 94
     87e:	ff 4f       	sbci	r31, 0xFF	; 255
     880:	82 e0       	ldi	r24, 0x02	; 2
     882:	81 83       	std	Z+1, r24	; 0x01
	if(temp != 0)
     884:	89 81       	ldd	r24, Y+1	; 0x01
     886:	88 23       	and	r24, r24
     888:	09 f4       	brne	.+2      	; 0x88c <stepper_pop_front_order+0x72>
     88a:	7e c0       	rjmp	.+252    	; 0x988 <stepper_pop_front_order+0x16e>
	{
		stepper_motors_table[index_arg].speed = 0xFF;
     88c:	8b e0       	ldi	r24, 0x0B	; 11
     88e:	82 9f       	mul	r24, r18
     890:	f0 01       	movw	r30, r0
     892:	83 9f       	mul	r24, r19
     894:	f0 0d       	add	r31, r0
     896:	11 24       	eor	r1, r1
     898:	ee 55       	subi	r30, 0x5E	; 94
     89a:	fc 4f       	sbci	r31, 0xFC	; 252
     89c:	8f ef       	ldi	r24, 0xFF	; 255
     89e:	84 83       	std	Z+4, r24	; 0x04
		if(stepper_motors_orders[temp].next != 0)
     8a0:	89 81       	ldd	r24, Y+1	; 0x01
     8a2:	90 e0       	ldi	r25, 0x00	; 0
     8a4:	fc 01       	movw	r30, r24
     8a6:	ee 0f       	add	r30, r30
     8a8:	ff 1f       	adc	r31, r31
     8aa:	e8 0f       	add	r30, r24
     8ac:	f9 1f       	adc	r31, r25
     8ae:	ee 0f       	add	r30, r30
     8b0:	ff 1f       	adc	r31, r31
     8b2:	ee 55       	subi	r30, 0x5E	; 94
     8b4:	ff 4f       	sbci	r31, 0xFF	; 255
     8b6:	85 81       	ldd	r24, Z+5	; 0x05
     8b8:	88 23       	and	r24, r24
     8ba:	69 f1       	breq	.+90     	; 0x916 <stepper_pop_front_order+0xfc>
		{
			if(stepper_motors_orders[stepper_motors_orders[temp].next].direction == CLOCKWISE)
     8bc:	89 81       	ldd	r24, Y+1	; 0x01
     8be:	90 e0       	ldi	r25, 0x00	; 0
     8c0:	fc 01       	movw	r30, r24
     8c2:	ee 0f       	add	r30, r30
     8c4:	ff 1f       	adc	r31, r31
     8c6:	e8 0f       	add	r30, r24
     8c8:	f9 1f       	adc	r31, r25
     8ca:	ee 0f       	add	r30, r30
     8cc:	ff 1f       	adc	r31, r31
     8ce:	ee 55       	subi	r30, 0x5E	; 94
     8d0:	ff 4f       	sbci	r31, 0xFF	; 255
     8d2:	85 81       	ldd	r24, Z+5	; 0x05
     8d4:	90 e0       	ldi	r25, 0x00	; 0
     8d6:	fc 01       	movw	r30, r24
     8d8:	ee 0f       	add	r30, r30
     8da:	ff 1f       	adc	r31, r31
     8dc:	e8 0f       	add	r30, r24
     8de:	f9 1f       	adc	r31, r25
     8e0:	ee 0f       	add	r30, r30
     8e2:	ff 1f       	adc	r31, r31
     8e4:	ee 55       	subi	r30, 0x5E	; 94
     8e6:	ff 4f       	sbci	r31, 0xFF	; 255
     8e8:	81 81       	ldd	r24, Z+1	; 0x01
     8ea:	81 11       	cpse	r24, r1
     8ec:	0a c0       	rjmp	.+20     	; 0x902 <stepper_pop_front_order+0xe8>
				stepper_motors_table[index_arg].mode = PHASE_A;
     8ee:	8b e0       	ldi	r24, 0x0B	; 11
     8f0:	82 9f       	mul	r24, r18
     8f2:	f0 01       	movw	r30, r0
     8f4:	83 9f       	mul	r24, r19
     8f6:	f0 0d       	add	r31, r0
     8f8:	11 24       	eor	r1, r1
     8fa:	ee 55       	subi	r30, 0x5E	; 94
     8fc:	fc 4f       	sbci	r31, 0xFC	; 252
     8fe:	11 86       	std	Z+9, r1	; 0x09
     900:	0a c0       	rjmp	.+20     	; 0x916 <stepper_pop_front_order+0xfc>
			else
				stepper_motors_table[index_arg].mode = PHASE_D;
     902:	8b e0       	ldi	r24, 0x0B	; 11
     904:	82 9f       	mul	r24, r18
     906:	f0 01       	movw	r30, r0
     908:	83 9f       	mul	r24, r19
     90a:	f0 0d       	add	r31, r0
     90c:	11 24       	eor	r1, r1
     90e:	ee 55       	subi	r30, 0x5E	; 94
     910:	fc 4f       	sbci	r31, 0xFC	; 252
     912:	83 e0       	ldi	r24, 0x03	; 3
     914:	81 87       	std	Z+9, r24	; 0x09
		}
		
		stepper_motors_table[index_arg].step = 0;	
     916:	8b e0       	ldi	r24, 0x0B	; 11
     918:	82 9f       	mul	r24, r18
     91a:	d0 01       	movw	r26, r0
     91c:	83 9f       	mul	r24, r19
     91e:	b0 0d       	add	r27, r0
     920:	11 24       	eor	r1, r1
     922:	ae 55       	subi	r26, 0x5E	; 94
     924:	bc 4f       	sbci	r27, 0xFC	; 252
     926:	18 96       	adiw	r26, 0x08	; 8
     928:	1c 92       	st	X, r1
     92a:	1e 92       	st	-X, r1
     92c:	17 97       	sbiw	r26, 0x07	; 7
		stepper_motors_table[index_arg].timer = 0;
     92e:	16 96       	adiw	r26, 0x06	; 6
     930:	1c 92       	st	X, r1
     932:	16 97       	sbiw	r26, 0x06	; 6
		stepper_motors_table[index_arg].orders_head = stepper_motors_orders[temp].next;
     934:	89 81       	ldd	r24, Y+1	; 0x01
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	fc 01       	movw	r30, r24
     93a:	ee 0f       	add	r30, r30
     93c:	ff 1f       	adc	r31, r31
     93e:	e8 0f       	add	r30, r24
     940:	f9 1f       	adc	r31, r25
     942:	ee 0f       	add	r30, r30
     944:	ff 1f       	adc	r31, r31
     946:	ee 55       	subi	r30, 0x5E	; 94
     948:	ff 4f       	sbci	r31, 0xFF	; 255
     94a:	85 81       	ldd	r24, Z+5	; 0x05
     94c:	15 96       	adiw	r26, 0x05	; 5
     94e:	8c 93       	st	X, r24
     950:	15 97       	sbiw	r26, 0x05	; 5
		
		if(stepper_motors_table[index_arg].placement == MSB) //port sequence after last order - no need to take power and heat engines
     952:	13 96       	adiw	r26, 0x03	; 3
     954:	8c 91       	ld	r24, X
     956:	13 97       	sbiw	r26, 0x03	; 3
     958:	81 11       	cpse	r24, r1
     95a:	08 c0       	rjmp	.+16     	; 0x96c <stepper_pop_front_order+0x152>
		{
			*stepper_motors_table[index_arg].port &= ~(0xF0);
     95c:	fd 01       	movw	r30, r26
     95e:	01 80       	ldd	r0, Z+1	; 0x01
     960:	f2 81       	ldd	r31, Z+2	; 0x02
     962:	e0 2d       	mov	r30, r0
     964:	80 81       	ld	r24, Z
     966:	8f 70       	andi	r24, 0x0F	; 15
     968:	80 83       	st	Z, r24
     96a:	0e c0       	rjmp	.+28     	; 0x988 <stepper_pop_front_order+0x16e>
		}else
			{
				*stepper_motors_table[index_arg].port &= ~(0xF);
     96c:	8b e0       	ldi	r24, 0x0B	; 11
     96e:	82 9f       	mul	r24, r18
     970:	f0 01       	movw	r30, r0
     972:	83 9f       	mul	r24, r19
     974:	f0 0d       	add	r31, r0
     976:	11 24       	eor	r1, r1
     978:	ee 55       	subi	r30, 0x5E	; 94
     97a:	fc 4f       	sbci	r31, 0xFC	; 252
     97c:	01 80       	ldd	r0, Z+1	; 0x01
     97e:	f2 81       	ldd	r31, Z+2	; 0x02
     980:	e0 2d       	mov	r30, r0
     982:	80 81       	ld	r24, Z
     984:	80 7f       	andi	r24, 0xF0	; 240
     986:	80 83       	st	Z, r24
			}  
	}
}
     988:	0f 90       	pop	r0
     98a:	df 91       	pop	r29
     98c:	cf 91       	pop	r28
     98e:	08 95       	ret

00000990 <stepper_process_motor>:
			servo_process_servo(index);
		}
	}
}
void stepper_process_motor(uint8_t index_arg)
{
     990:	df 92       	push	r13
     992:	ef 92       	push	r14
     994:	ff 92       	push	r15
     996:	0f 93       	push	r16
     998:	1f 93       	push	r17
     99a:	cf 93       	push	r28
     99c:	df 93       	push	r29
	uint8_t stepper_a, stepper_b, stepper_c, stepper_d;
	if(stepper_motors_table[index_arg].placement == MSB)
     99e:	c8 2f       	mov	r28, r24
     9a0:	d0 e0       	ldi	r29, 0x00	; 0
     9a2:	0b e0       	ldi	r16, 0x0B	; 11
     9a4:	80 9f       	mul	r24, r16
     9a6:	f0 01       	movw	r30, r0
     9a8:	11 24       	eor	r1, r1
     9aa:	ee 55       	subi	r30, 0x5E	; 94
     9ac:	fc 4f       	sbci	r31, 0xFC	; 252
     9ae:	93 81       	ldd	r25, Z+3	; 0x03
     9b0:	99 23       	and	r25, r25
     9b2:	29 f0       	breq	.+10     	; 0x9be <stepper_process_motor+0x2e>
	}else
		{
			stepper_a = 0;
			stepper_b = 1;
			stepper_c = 2;
			stepper_d = 3;
     9b4:	93 e0       	ldi	r25, 0x03	; 3
		stepper_d = 7;
	}else
		{
			stepper_a = 0;
			stepper_b = 1;
			stepper_c = 2;
     9b6:	42 e0       	ldi	r20, 0x02	; 2
		stepper_c = 6;
		stepper_d = 7;
	}else
		{
			stepper_a = 0;
			stepper_b = 1;
     9b8:	61 e0       	ldi	r22, 0x01	; 1
		stepper_b = 5;
		stepper_c = 6;
		stepper_d = 7;
	}else
		{
			stepper_a = 0;
     9ba:	50 e0       	ldi	r21, 0x00	; 0
     9bc:	04 c0       	rjmp	.+8      	; 0x9c6 <stepper_process_motor+0x36>
	if(stepper_motors_table[index_arg].placement == MSB)
	{
		stepper_a = 4;
		stepper_b = 5;
		stepper_c = 6;
		stepper_d = 7;
     9be:	97 e0       	ldi	r25, 0x07	; 7
	uint8_t stepper_a, stepper_b, stepper_c, stepper_d;
	if(stepper_motors_table[index_arg].placement == MSB)
	{
		stepper_a = 4;
		stepper_b = 5;
		stepper_c = 6;
     9c0:	46 e0       	ldi	r20, 0x06	; 6
{
	uint8_t stepper_a, stepper_b, stepper_c, stepper_d;
	if(stepper_motors_table[index_arg].placement == MSB)
	{
		stepper_a = 4;
		stepper_b = 5;
     9c2:	65 e0       	ldi	r22, 0x05	; 5
void stepper_process_motor(uint8_t index_arg)
{
	uint8_t stepper_a, stepper_b, stepper_c, stepper_d;
	if(stepper_motors_table[index_arg].placement == MSB)
	{
		stepper_a = 4;
     9c4:	54 e0       	ldi	r21, 0x04	; 4
			stepper_b = 1;
			stepper_c = 2;
			stepper_d = 3;
		}
	
	switch(stepper_motors_table[index_arg].mode)
     9c6:	2b e0       	ldi	r18, 0x0B	; 11
     9c8:	2c 9f       	mul	r18, r28
     9ca:	f0 01       	movw	r30, r0
     9cc:	2d 9f       	mul	r18, r29
     9ce:	f0 0d       	add	r31, r0
     9d0:	11 24       	eor	r1, r1
     9d2:	ee 55       	subi	r30, 0x5E	; 94
     9d4:	fc 4f       	sbci	r31, 0xFC	; 252
     9d6:	21 85       	ldd	r18, Z+9	; 0x09
     9d8:	21 30       	cpi	r18, 0x01	; 1
     9da:	71 f1       	breq	.+92     	; 0xa38 <stepper_process_motor+0xa8>
     9dc:	38 f0       	brcs	.+14     	; 0x9ec <stepper_process_motor+0x5c>
     9de:	22 30       	cpi	r18, 0x02	; 2
     9e0:	09 f4       	brne	.+2      	; 0x9e4 <stepper_process_motor+0x54>
     9e2:	50 c0       	rjmp	.+160    	; 0xa84 <stepper_process_motor+0xf4>
     9e4:	23 30       	cpi	r18, 0x03	; 3
     9e6:	09 f4       	brne	.+2      	; 0x9ea <stepper_process_motor+0x5a>
     9e8:	73 c0       	rjmp	.+230    	; 0xad0 <stepper_process_motor+0x140>
     9ea:	97 c0       	rjmp	.+302    	; 0xb1a <stepper_process_motor+0x18a>
	{
		case PHASE_A:
		*stepper_motors_table[index_arg].port &= ~(1<<stepper_c);
     9ec:	2b e0       	ldi	r18, 0x0B	; 11
     9ee:	2c 9f       	mul	r18, r28
     9f0:	f0 01       	movw	r30, r0
     9f2:	2d 9f       	mul	r18, r29
     9f4:	f0 0d       	add	r31, r0
     9f6:	11 24       	eor	r1, r1
     9f8:	ee 55       	subi	r30, 0x5E	; 94
     9fa:	fc 4f       	sbci	r31, 0xFC	; 252
     9fc:	e1 80       	ldd	r14, Z+1	; 0x01
     9fe:	f2 80       	ldd	r15, Z+2	; 0x02
     a00:	d7 01       	movw	r26, r14
     a02:	dc 90       	ld	r13, X
     a04:	21 e0       	ldi	r18, 0x01	; 1
     a06:	30 e0       	ldi	r19, 0x00	; 0
     a08:	89 01       	movw	r16, r18
     a0a:	04 2e       	mov	r0, r20
     a0c:	02 c0       	rjmp	.+4      	; 0xa12 <stepper_process_motor+0x82>
     a0e:	00 0f       	add	r16, r16
     a10:	11 1f       	adc	r17, r17
     a12:	0a 94       	dec	r0
     a14:	e2 f7       	brpl	.-8      	; 0xa0e <stepper_process_motor+0x7e>
     a16:	70 2f       	mov	r23, r16
     a18:	70 95       	com	r23
     a1a:	7d 21       	and	r23, r13
     a1c:	7c 93       	st	X, r23
		*stepper_motors_table[index_arg].port |= (1<<stepper_a);
     a1e:	01 80       	ldd	r0, Z+1	; 0x01
     a20:	f2 81       	ldd	r31, Z+2	; 0x02
     a22:	e0 2d       	mov	r30, r0
     a24:	70 81       	ld	r23, Z
     a26:	05 2e       	mov	r0, r21
     a28:	02 c0       	rjmp	.+4      	; 0xa2e <stepper_process_motor+0x9e>
     a2a:	22 0f       	add	r18, r18
     a2c:	33 1f       	adc	r19, r19
     a2e:	0a 94       	dec	r0
     a30:	e2 f7       	brpl	.-8      	; 0xa2a <stepper_process_motor+0x9a>
     a32:	27 2b       	or	r18, r23
     a34:	20 83       	st	Z, r18
		break;
     a36:	71 c0       	rjmp	.+226    	; 0xb1a <stepper_process_motor+0x18a>
		
		case PHASE_B:
		*stepper_motors_table[index_arg].port &= ~(1<<stepper_d);
     a38:	2b e0       	ldi	r18, 0x0B	; 11
     a3a:	2c 9f       	mul	r18, r28
     a3c:	f0 01       	movw	r30, r0
     a3e:	2d 9f       	mul	r18, r29
     a40:	f0 0d       	add	r31, r0
     a42:	11 24       	eor	r1, r1
     a44:	ee 55       	subi	r30, 0x5E	; 94
     a46:	fc 4f       	sbci	r31, 0xFC	; 252
     a48:	e1 80       	ldd	r14, Z+1	; 0x01
     a4a:	f2 80       	ldd	r15, Z+2	; 0x02
     a4c:	d7 01       	movw	r26, r14
     a4e:	dc 90       	ld	r13, X
     a50:	21 e0       	ldi	r18, 0x01	; 1
     a52:	30 e0       	ldi	r19, 0x00	; 0
     a54:	89 01       	movw	r16, r18
     a56:	09 2e       	mov	r0, r25
     a58:	02 c0       	rjmp	.+4      	; 0xa5e <stepper_process_motor+0xce>
     a5a:	00 0f       	add	r16, r16
     a5c:	11 1f       	adc	r17, r17
     a5e:	0a 94       	dec	r0
     a60:	e2 f7       	brpl	.-8      	; 0xa5a <stepper_process_motor+0xca>
     a62:	70 2f       	mov	r23, r16
     a64:	70 95       	com	r23
     a66:	7d 21       	and	r23, r13
     a68:	7c 93       	st	X, r23
		*stepper_motors_table[index_arg].port |= (1<<stepper_b);
     a6a:	01 80       	ldd	r0, Z+1	; 0x01
     a6c:	f2 81       	ldd	r31, Z+2	; 0x02
     a6e:	e0 2d       	mov	r30, r0
     a70:	70 81       	ld	r23, Z
     a72:	06 2e       	mov	r0, r22
     a74:	02 c0       	rjmp	.+4      	; 0xa7a <stepper_process_motor+0xea>
     a76:	22 0f       	add	r18, r18
     a78:	33 1f       	adc	r19, r19
     a7a:	0a 94       	dec	r0
     a7c:	e2 f7       	brpl	.-8      	; 0xa76 <stepper_process_motor+0xe6>
     a7e:	27 2b       	or	r18, r23
     a80:	20 83       	st	Z, r18
		break;
     a82:	4b c0       	rjmp	.+150    	; 0xb1a <stepper_process_motor+0x18a>
		
		case PHASE_C:
		*stepper_motors_table[index_arg].port &= ~(1<<stepper_a);
     a84:	2b e0       	ldi	r18, 0x0B	; 11
     a86:	2c 9f       	mul	r18, r28
     a88:	f0 01       	movw	r30, r0
     a8a:	2d 9f       	mul	r18, r29
     a8c:	f0 0d       	add	r31, r0
     a8e:	11 24       	eor	r1, r1
     a90:	ee 55       	subi	r30, 0x5E	; 94
     a92:	fc 4f       	sbci	r31, 0xFC	; 252
     a94:	e1 80       	ldd	r14, Z+1	; 0x01
     a96:	f2 80       	ldd	r15, Z+2	; 0x02
     a98:	d7 01       	movw	r26, r14
     a9a:	dc 90       	ld	r13, X
     a9c:	21 e0       	ldi	r18, 0x01	; 1
     a9e:	30 e0       	ldi	r19, 0x00	; 0
     aa0:	89 01       	movw	r16, r18
     aa2:	05 2e       	mov	r0, r21
     aa4:	02 c0       	rjmp	.+4      	; 0xaaa <stepper_process_motor+0x11a>
     aa6:	00 0f       	add	r16, r16
     aa8:	11 1f       	adc	r17, r17
     aaa:	0a 94       	dec	r0
     aac:	e2 f7       	brpl	.-8      	; 0xaa6 <stepper_process_motor+0x116>
     aae:	70 2f       	mov	r23, r16
     ab0:	70 95       	com	r23
     ab2:	7d 21       	and	r23, r13
     ab4:	7c 93       	st	X, r23
		*stepper_motors_table[index_arg].port |= (1<<stepper_c);
     ab6:	01 80       	ldd	r0, Z+1	; 0x01
     ab8:	f2 81       	ldd	r31, Z+2	; 0x02
     aba:	e0 2d       	mov	r30, r0
     abc:	70 81       	ld	r23, Z
     abe:	04 2e       	mov	r0, r20
     ac0:	02 c0       	rjmp	.+4      	; 0xac6 <stepper_process_motor+0x136>
     ac2:	22 0f       	add	r18, r18
     ac4:	33 1f       	adc	r19, r19
     ac6:	0a 94       	dec	r0
     ac8:	e2 f7       	brpl	.-8      	; 0xac2 <stepper_process_motor+0x132>
     aca:	27 2b       	or	r18, r23
     acc:	20 83       	st	Z, r18
		break;
     ace:	25 c0       	rjmp	.+74     	; 0xb1a <stepper_process_motor+0x18a>
		
		case PHASE_D:
		*stepper_motors_table[index_arg].port &= ~(1<<stepper_b);
     ad0:	2b e0       	ldi	r18, 0x0B	; 11
     ad2:	2c 9f       	mul	r18, r28
     ad4:	f0 01       	movw	r30, r0
     ad6:	2d 9f       	mul	r18, r29
     ad8:	f0 0d       	add	r31, r0
     ada:	11 24       	eor	r1, r1
     adc:	ee 55       	subi	r30, 0x5E	; 94
     ade:	fc 4f       	sbci	r31, 0xFC	; 252
     ae0:	e1 80       	ldd	r14, Z+1	; 0x01
     ae2:	f2 80       	ldd	r15, Z+2	; 0x02
     ae4:	d7 01       	movw	r26, r14
     ae6:	dc 90       	ld	r13, X
     ae8:	21 e0       	ldi	r18, 0x01	; 1
     aea:	30 e0       	ldi	r19, 0x00	; 0
     aec:	89 01       	movw	r16, r18
     aee:	06 2e       	mov	r0, r22
     af0:	02 c0       	rjmp	.+4      	; 0xaf6 <stepper_process_motor+0x166>
     af2:	00 0f       	add	r16, r16
     af4:	11 1f       	adc	r17, r17
     af6:	0a 94       	dec	r0
     af8:	e2 f7       	brpl	.-8      	; 0xaf2 <stepper_process_motor+0x162>
     afa:	70 2f       	mov	r23, r16
     afc:	70 95       	com	r23
     afe:	7d 21       	and	r23, r13
     b00:	7c 93       	st	X, r23
		*stepper_motors_table[index_arg].port |= (1<<stepper_d);
     b02:	01 80       	ldd	r0, Z+1	; 0x01
     b04:	f2 81       	ldd	r31, Z+2	; 0x02
     b06:	e0 2d       	mov	r30, r0
     b08:	70 81       	ld	r23, Z
     b0a:	09 2e       	mov	r0, r25
     b0c:	02 c0       	rjmp	.+4      	; 0xb12 <stepper_process_motor+0x182>
     b0e:	22 0f       	add	r18, r18
     b10:	33 1f       	adc	r19, r19
     b12:	0a 94       	dec	r0
     b14:	e2 f7       	brpl	.-8      	; 0xb0e <stepper_process_motor+0x17e>
     b16:	27 2b       	or	r18, r23
     b18:	20 83       	st	Z, r18
		break;
		
		default: break;
	}
	
	if(stepper_motors_orders[stepper_motors_table[index_arg].orders_head].direction == CLOCKWISE) //this double if is just mode movement
     b1a:	2b e0       	ldi	r18, 0x0B	; 11
     b1c:	2c 9f       	mul	r18, r28
     b1e:	f0 01       	movw	r30, r0
     b20:	2d 9f       	mul	r18, r29
     b22:	f0 0d       	add	r31, r0
     b24:	11 24       	eor	r1, r1
     b26:	ee 55       	subi	r30, 0x5E	; 94
     b28:	fc 4f       	sbci	r31, 0xFC	; 252
     b2a:	25 81       	ldd	r18, Z+5	; 0x05
     b2c:	30 e0       	ldi	r19, 0x00	; 0
     b2e:	f9 01       	movw	r30, r18
     b30:	ee 0f       	add	r30, r30
     b32:	ff 1f       	adc	r31, r31
     b34:	e2 0f       	add	r30, r18
     b36:	f3 1f       	adc	r31, r19
     b38:	ee 0f       	add	r30, r30
     b3a:	ff 1f       	adc	r31, r31
     b3c:	ee 55       	subi	r30, 0x5E	; 94
     b3e:	ff 4f       	sbci	r31, 0xFF	; 255
     b40:	21 81       	ldd	r18, Z+1	; 0x01
     b42:	21 11       	cpse	r18, r1
     b44:	21 c0       	rjmp	.+66     	; 0xb88 <stepper_process_motor+0x1f8>
	{
		if(stepper_motors_table[index_arg].mode == PHASE_D) 
     b46:	2b e0       	ldi	r18, 0x0B	; 11
     b48:	2c 9f       	mul	r18, r28
     b4a:	f0 01       	movw	r30, r0
     b4c:	2d 9f       	mul	r18, r29
     b4e:	f0 0d       	add	r31, r0
     b50:	11 24       	eor	r1, r1
     b52:	ee 55       	subi	r30, 0x5E	; 94
     b54:	fc 4f       	sbci	r31, 0xFC	; 252
     b56:	21 85       	ldd	r18, Z+9	; 0x09
     b58:	23 30       	cpi	r18, 0x03	; 3
     b5a:	51 f4       	brne	.+20     	; 0xb70 <stepper_process_motor+0x1e0>
		{
			stepper_motors_table[index_arg].mode = PHASE_A;
     b5c:	2b e0       	ldi	r18, 0x0B	; 11
     b5e:	2c 9f       	mul	r18, r28
     b60:	f0 01       	movw	r30, r0
     b62:	2d 9f       	mul	r18, r29
     b64:	f0 0d       	add	r31, r0
     b66:	11 24       	eor	r1, r1
     b68:	ee 55       	subi	r30, 0x5E	; 94
     b6a:	fc 4f       	sbci	r31, 0xFC	; 252
     b6c:	11 86       	std	Z+9, r1	; 0x09
     b6e:	43 c0       	rjmp	.+134    	; 0xbf6 <stepper_process_motor+0x266>
		}
		else 
			stepper_motors_table[index_arg].mode++;
     b70:	2b e0       	ldi	r18, 0x0B	; 11
     b72:	2c 9f       	mul	r18, r28
     b74:	f0 01       	movw	r30, r0
     b76:	2d 9f       	mul	r18, r29
     b78:	f0 0d       	add	r31, r0
     b7a:	11 24       	eor	r1, r1
     b7c:	ee 55       	subi	r30, 0x5E	; 94
     b7e:	fc 4f       	sbci	r31, 0xFC	; 252
     b80:	21 85       	ldd	r18, Z+9	; 0x09
     b82:	2f 5f       	subi	r18, 0xFF	; 255
     b84:	21 87       	std	Z+9, r18	; 0x09
     b86:	37 c0       	rjmp	.+110    	; 0xbf6 <stepper_process_motor+0x266>
	}else
		if(stepper_motors_orders[stepper_motors_table[index_arg].orders_head].direction == COUNTERCLOCKWISE)
     b88:	2b e0       	ldi	r18, 0x0B	; 11
     b8a:	2c 9f       	mul	r18, r28
     b8c:	f0 01       	movw	r30, r0
     b8e:	2d 9f       	mul	r18, r29
     b90:	f0 0d       	add	r31, r0
     b92:	11 24       	eor	r1, r1
     b94:	ee 55       	subi	r30, 0x5E	; 94
     b96:	fc 4f       	sbci	r31, 0xFC	; 252
     b98:	25 81       	ldd	r18, Z+5	; 0x05
     b9a:	30 e0       	ldi	r19, 0x00	; 0
     b9c:	f9 01       	movw	r30, r18
     b9e:	ee 0f       	add	r30, r30
     ba0:	ff 1f       	adc	r31, r31
     ba2:	e2 0f       	add	r30, r18
     ba4:	f3 1f       	adc	r31, r19
     ba6:	ee 0f       	add	r30, r30
     ba8:	ff 1f       	adc	r31, r31
     baa:	ee 55       	subi	r30, 0x5E	; 94
     bac:	ff 4f       	sbci	r31, 0xFF	; 255
     bae:	21 81       	ldd	r18, Z+1	; 0x01
     bb0:	21 30       	cpi	r18, 0x01	; 1
     bb2:	09 f5       	brne	.+66     	; 0xbf6 <stepper_process_motor+0x266>
		{
			if(stepper_motors_table[index_arg].mode == PHASE_A)
     bb4:	2b e0       	ldi	r18, 0x0B	; 11
     bb6:	2c 9f       	mul	r18, r28
     bb8:	f0 01       	movw	r30, r0
     bba:	2d 9f       	mul	r18, r29
     bbc:	f0 0d       	add	r31, r0
     bbe:	11 24       	eor	r1, r1
     bc0:	ee 55       	subi	r30, 0x5E	; 94
     bc2:	fc 4f       	sbci	r31, 0xFC	; 252
     bc4:	21 85       	ldd	r18, Z+9	; 0x09
     bc6:	21 11       	cpse	r18, r1
     bc8:	0b c0       	rjmp	.+22     	; 0xbe0 <stepper_process_motor+0x250>
			{
				stepper_motors_table[index_arg].mode = PHASE_D;
     bca:	2b e0       	ldi	r18, 0x0B	; 11
     bcc:	2c 9f       	mul	r18, r28
     bce:	f0 01       	movw	r30, r0
     bd0:	2d 9f       	mul	r18, r29
     bd2:	f0 0d       	add	r31, r0
     bd4:	11 24       	eor	r1, r1
     bd6:	ee 55       	subi	r30, 0x5E	; 94
     bd8:	fc 4f       	sbci	r31, 0xFC	; 252
     bda:	23 e0       	ldi	r18, 0x03	; 3
     bdc:	21 87       	std	Z+9, r18	; 0x09
     bde:	0b c0       	rjmp	.+22     	; 0xbf6 <stepper_process_motor+0x266>
			}
			else
				stepper_motors_table[index_arg].mode--;
     be0:	2b e0       	ldi	r18, 0x0B	; 11
     be2:	2c 9f       	mul	r18, r28
     be4:	f0 01       	movw	r30, r0
     be6:	2d 9f       	mul	r18, r29
     be8:	f0 0d       	add	r31, r0
     bea:	11 24       	eor	r1, r1
     bec:	ee 55       	subi	r30, 0x5E	; 94
     bee:	fc 4f       	sbci	r31, 0xFC	; 252
     bf0:	21 85       	ldd	r18, Z+9	; 0x09
     bf2:	21 50       	subi	r18, 0x01	; 1
     bf4:	21 87       	std	Z+9, r18	; 0x09
		}
	if(stepper_motors_table[index_arg].step == (stepper_motors_orders[stepper_motors_table[index_arg].orders_head].move+4)) //to doo
     bf6:	2b e0       	ldi	r18, 0x0B	; 11
     bf8:	2c 9f       	mul	r18, r28
     bfa:	f0 01       	movw	r30, r0
     bfc:	2d 9f       	mul	r18, r29
     bfe:	f0 0d       	add	r31, r0
     c00:	11 24       	eor	r1, r1
     c02:	ee 55       	subi	r30, 0x5E	; 94
     c04:	fc 4f       	sbci	r31, 0xFC	; 252
     c06:	a7 81       	ldd	r26, Z+7	; 0x07
     c08:	b0 85       	ldd	r27, Z+8	; 0x08
     c0a:	25 81       	ldd	r18, Z+5	; 0x05
     c0c:	30 e0       	ldi	r19, 0x00	; 0
     c0e:	f9 01       	movw	r30, r18
     c10:	ee 0f       	add	r30, r30
     c12:	ff 1f       	adc	r31, r31
     c14:	e2 0f       	add	r30, r18
     c16:	f3 1f       	adc	r31, r19
     c18:	ee 0f       	add	r30, r30
     c1a:	ff 1f       	adc	r31, r31
     c1c:	ee 55       	subi	r30, 0x5E	; 94
     c1e:	ff 4f       	sbci	r31, 0xFF	; 255
     c20:	22 81       	ldd	r18, Z+2	; 0x02
     c22:	33 81       	ldd	r19, Z+3	; 0x03
     c24:	2c 5f       	subi	r18, 0xFC	; 252
     c26:	3f 4f       	sbci	r19, 0xFF	; 255
     c28:	a2 17       	cp	r26, r18
     c2a:	b3 07       	cpc	r27, r19
     c2c:	79 f5       	brne	.+94     	; 0xc8c <stepper_process_motor+0x2fc>
	{
		*stepper_motors_table[index_arg].port &= ~((1<<stepper_a)|(1<<stepper_b)|(1<<stepper_c)|(1<<stepper_d)); //must be here because of a-d shortcuts
     c2e:	2b e0       	ldi	r18, 0x0B	; 11
     c30:	2c 9f       	mul	r18, r28
     c32:	f0 01       	movw	r30, r0
     c34:	2d 9f       	mul	r18, r29
     c36:	f0 0d       	add	r31, r0
     c38:	11 24       	eor	r1, r1
     c3a:	ee 55       	subi	r30, 0x5E	; 94
     c3c:	fc 4f       	sbci	r31, 0xFC	; 252
     c3e:	01 80       	ldd	r0, Z+1	; 0x01
     c40:	f2 81       	ldd	r31, Z+2	; 0x02
     c42:	e0 2d       	mov	r30, r0
     c44:	70 81       	ld	r23, Z
     c46:	21 e0       	ldi	r18, 0x01	; 1
     c48:	30 e0       	ldi	r19, 0x00	; 0
     c4a:	89 01       	movw	r16, r18
     c4c:	02 c0       	rjmp	.+4      	; 0xc52 <stepper_process_motor+0x2c2>
     c4e:	00 0f       	add	r16, r16
     c50:	11 1f       	adc	r17, r17
     c52:	6a 95       	dec	r22
     c54:	e2 f7       	brpl	.-8      	; 0xc4e <stepper_process_motor+0x2be>
     c56:	d9 01       	movw	r26, r18
     c58:	02 c0       	rjmp	.+4      	; 0xc5e <stepper_process_motor+0x2ce>
     c5a:	aa 0f       	add	r26, r26
     c5c:	bb 1f       	adc	r27, r27
     c5e:	5a 95       	dec	r21
     c60:	e2 f7       	brpl	.-8      	; 0xc5a <stepper_process_motor+0x2ca>
     c62:	a0 2b       	or	r26, r16
     c64:	89 01       	movw	r16, r18
     c66:	02 c0       	rjmp	.+4      	; 0xc6c <stepper_process_motor+0x2dc>
     c68:	00 0f       	add	r16, r16
     c6a:	11 1f       	adc	r17, r17
     c6c:	4a 95       	dec	r20
     c6e:	e2 f7       	brpl	.-8      	; 0xc68 <stepper_process_motor+0x2d8>
     c70:	a8 01       	movw	r20, r16
     c72:	4a 2b       	or	r20, r26
     c74:	02 c0       	rjmp	.+4      	; 0xc7a <stepper_process_motor+0x2ea>
     c76:	22 0f       	add	r18, r18
     c78:	33 1f       	adc	r19, r19
     c7a:	9a 95       	dec	r25
     c7c:	e2 f7       	brpl	.-8      	; 0xc76 <stepper_process_motor+0x2e6>
     c7e:	24 2b       	or	r18, r20
     c80:	20 95       	com	r18
     c82:	27 23       	and	r18, r23
     c84:	20 83       	st	Z, r18
		stepper_pop_front_order(index_arg);
     c86:	0e 94 0d 04 	call	0x81a	; 0x81a <stepper_pop_front_order>
     c8a:	0d c0       	rjmp	.+26     	; 0xca6 <stepper_process_motor+0x316>

	}else
		stepper_motors_table[index_arg].step++;
     c8c:	8b e0       	ldi	r24, 0x0B	; 11
     c8e:	8c 9f       	mul	r24, r28
     c90:	f0 01       	movw	r30, r0
     c92:	8d 9f       	mul	r24, r29
     c94:	f0 0d       	add	r31, r0
     c96:	11 24       	eor	r1, r1
     c98:	ee 55       	subi	r30, 0x5E	; 94
     c9a:	fc 4f       	sbci	r31, 0xFC	; 252
     c9c:	87 81       	ldd	r24, Z+7	; 0x07
     c9e:	90 85       	ldd	r25, Z+8	; 0x08
     ca0:	01 96       	adiw	r24, 0x01	; 1
     ca2:	90 87       	std	Z+8, r25	; 0x08
     ca4:	87 83       	std	Z+7, r24	; 0x07
	
	if( stepper_motors_table[index_arg].speed > stepper_motors_table[index_arg].limit ) stepper_motors_table[index_arg].speed--; //limit and speed a little inconsistent namespace
     ca6:	8b e0       	ldi	r24, 0x0B	; 11
     ca8:	8c 9f       	mul	r24, r28
     caa:	f0 01       	movw	r30, r0
     cac:	8d 9f       	mul	r24, r29
     cae:	f0 0d       	add	r31, r0
     cb0:	11 24       	eor	r1, r1
     cb2:	ee 55       	subi	r30, 0x5E	; 94
     cb4:	fc 4f       	sbci	r31, 0xFC	; 252
     cb6:	94 81       	ldd	r25, Z+4	; 0x04
     cb8:	82 85       	ldd	r24, Z+10	; 0x0a
     cba:	89 17       	cp	r24, r25
     cbc:	58 f4       	brcc	.+22     	; 0xcd4 <stepper_process_motor+0x344>
     cbe:	8b e0       	ldi	r24, 0x0B	; 11
     cc0:	8c 9f       	mul	r24, r28
     cc2:	f0 01       	movw	r30, r0
     cc4:	8d 9f       	mul	r24, r29
     cc6:	f0 0d       	add	r31, r0
     cc8:	11 24       	eor	r1, r1
     cca:	ee 55       	subi	r30, 0x5E	; 94
     ccc:	fc 4f       	sbci	r31, 0xFC	; 252
     cce:	84 81       	ldd	r24, Z+4	; 0x04
     cd0:	81 50       	subi	r24, 0x01	; 1
     cd2:	84 83       	std	Z+4, r24	; 0x04
}
     cd4:	df 91       	pop	r29
     cd6:	cf 91       	pop	r28
     cd8:	1f 91       	pop	r17
     cda:	0f 91       	pop	r16
     cdc:	ff 90       	pop	r15
     cde:	ef 90       	pop	r14
     ce0:	df 90       	pop	r13
     ce2:	08 95       	ret

00000ce4 <__vector_9>:
	TCCR0 |= (1<<CS00); //interrupts and no prescaler so up to <<< 255 instructions
	
	sei();
}
ISR(TIMER0_OVF_vect)
{
     ce4:	1f 92       	push	r1
     ce6:	0f 92       	push	r0
     ce8:	0f b6       	in	r0, 0x3f	; 63
     cea:	0f 92       	push	r0
     cec:	11 24       	eor	r1, r1
     cee:	ef 92       	push	r14
     cf0:	ff 92       	push	r15
     cf2:	1f 93       	push	r17
     cf4:	2f 93       	push	r18
     cf6:	3f 93       	push	r19
     cf8:	4f 93       	push	r20
     cfa:	5f 93       	push	r21
     cfc:	6f 93       	push	r22
     cfe:	7f 93       	push	r23
     d00:	8f 93       	push	r24
     d02:	9f 93       	push	r25
     d04:	af 93       	push	r26
     d06:	bf 93       	push	r27
     d08:	cf 93       	push	r28
     d0a:	df 93       	push	r29
     d0c:	ef 93       	push	r30
     d0e:	ff 93       	push	r31
     d10:	c0 e0       	ldi	r28, 0x00	; 0
     d12:	d0 e0       	ldi	r29, 0x00	; 0
	for(uint8_t index = 0; index < STEPPER_NUM_OF_MOTORS; index++)
	{
		if(stepper_motors_table[index].timer == stepper_motors_table[index].speed) 
     d14:	1b e0       	ldi	r17, 0x0B	; 11
     d16:	8c 2f       	mov	r24, r28
     d18:	7e 01       	movw	r14, r28
     d1a:	1c 9f       	mul	r17, r28
     d1c:	f0 01       	movw	r30, r0
     d1e:	1d 9f       	mul	r17, r29
     d20:	f0 0d       	add	r31, r0
     d22:	11 24       	eor	r1, r1
     d24:	ee 55       	subi	r30, 0x5E	; 94
     d26:	fc 4f       	sbci	r31, 0xFC	; 252
     d28:	26 81       	ldd	r18, Z+6	; 0x06
     d2a:	94 81       	ldd	r25, Z+4	; 0x04
     d2c:	29 13       	cpse	r18, r25
     d2e:	50 c0       	rjmp	.+160    	; 0xdd0 <__vector_9+0xec>
		{
			if(stepper_motors_table[index].orders_head != 0)
     d30:	1c 9f       	mul	r17, r28
     d32:	f0 01       	movw	r30, r0
     d34:	1d 9f       	mul	r17, r29
     d36:	f0 0d       	add	r31, r0
     d38:	11 24       	eor	r1, r1
     d3a:	ee 55       	subi	r30, 0x5E	; 94
     d3c:	fc 4f       	sbci	r31, 0xFC	; 252
     d3e:	95 81       	ldd	r25, Z+5	; 0x05
     d40:	99 23       	and	r25, r25
     d42:	e9 f1       	breq	.+122    	; 0xdbe <__vector_9+0xda>
			{
				uint8_t temp = stepper_motors_orders[stepper_motors_table[index].orders_head].barrier;
     d44:	1e 9d       	mul	r17, r14
     d46:	f0 01       	movw	r30, r0
     d48:	1f 9d       	mul	r17, r15
     d4a:	f0 0d       	add	r31, r0
     d4c:	11 24       	eor	r1, r1
     d4e:	ee 55       	subi	r30, 0x5E	; 94
     d50:	fc 4f       	sbci	r31, 0xFC	; 252
     d52:	25 81       	ldd	r18, Z+5	; 0x05
     d54:	30 e0       	ldi	r19, 0x00	; 0
     d56:	f9 01       	movw	r30, r18
     d58:	ee 0f       	add	r30, r30
     d5a:	ff 1f       	adc	r31, r31
     d5c:	e2 0f       	add	r30, r18
     d5e:	f3 1f       	adc	r31, r19
     d60:	ee 0f       	add	r30, r30
     d62:	ff 1f       	adc	r31, r31
     d64:	ee 55       	subi	r30, 0x5E	; 94
     d66:	ff 4f       	sbci	r31, 0xFF	; 255
     d68:	24 81       	ldd	r18, Z+4	; 0x04
				if(temp == 0){
     d6a:	21 11       	cpse	r18, r1
     d6c:	03 c0       	rjmp	.+6      	; 0xd74 <__vector_9+0x90>
					 stepper_process_motor(index);
     d6e:	0e 94 c8 04 	call	0x990	; 0x990 <stepper_process_motor>
     d72:	25 c0       	rjmp	.+74     	; 0xdbe <__vector_9+0xda>
				}else
					{
						if(temp > STEPPER_ORDERS_TOTAL_NUMBER){
     d74:	21 38       	cpi	r18, 0x81	; 129
     d76:	98 f0       	brcs	.+38     	; 0xd9e <__vector_9+0xba>
							temp -= STEPPER_ORDERS_TOTAL_NUMBER;
     d78:	20 58       	subi	r18, 0x80	; 128
							if( servo_orders_table[temp].position == 0 ){
     d7a:	30 e0       	ldi	r19, 0x00	; 0
     d7c:	f9 01       	movw	r30, r18
     d7e:	ee 0f       	add	r30, r30
     d80:	ff 1f       	adc	r31, r31
     d82:	ee 0f       	add	r30, r30
     d84:	ff 1f       	adc	r31, r31
     d86:	2e 0f       	add	r18, r30
     d88:	3f 1f       	adc	r19, r31
     d8a:	f9 01       	movw	r30, r18
     d8c:	e0 59       	subi	r30, 0x90	; 144
     d8e:	ff 4f       	sbci	r31, 0xFF	; 255
     d90:	21 81       	ldd	r18, Z+1	; 0x01
     d92:	32 81       	ldd	r19, Z+2	; 0x02
     d94:	23 2b       	or	r18, r19
     d96:	99 f4       	brne	.+38     	; 0xdbe <__vector_9+0xda>
								stepper_process_motor(index);
     d98:	0e 94 c8 04 	call	0x990	; 0x990 <stepper_process_motor>
     d9c:	10 c0       	rjmp	.+32     	; 0xdbe <__vector_9+0xda>
							}
						}else			
							if( stepper_motors_orders[temp].move == 0 ){
     d9e:	30 e0       	ldi	r19, 0x00	; 0
     da0:	f9 01       	movw	r30, r18
     da2:	ee 0f       	add	r30, r30
     da4:	ff 1f       	adc	r31, r31
     da6:	e2 0f       	add	r30, r18
     da8:	f3 1f       	adc	r31, r19
     daa:	ee 0f       	add	r30, r30
     dac:	ff 1f       	adc	r31, r31
     dae:	ee 55       	subi	r30, 0x5E	; 94
     db0:	ff 4f       	sbci	r31, 0xFF	; 255
     db2:	22 81       	ldd	r18, Z+2	; 0x02
     db4:	33 81       	ldd	r19, Z+3	; 0x03
     db6:	23 2b       	or	r18, r19
     db8:	11 f4       	brne	.+4      	; 0xdbe <__vector_9+0xda>
								stepper_process_motor(index);
     dba:	0e 94 c8 04 	call	0x990	; 0x990 <stepper_process_motor>
							}
					}
			}
			stepper_motors_table[index].timer = 0;
     dbe:	1e 9d       	mul	r17, r14
     dc0:	f0 01       	movw	r30, r0
     dc2:	1f 9d       	mul	r17, r15
     dc4:	f0 0d       	add	r31, r0
     dc6:	11 24       	eor	r1, r1
     dc8:	ee 55       	subi	r30, 0x5E	; 94
     dca:	fc 4f       	sbci	r31, 0xFC	; 252
     dcc:	16 82       	std	Z+6, r1	; 0x06
     dce:	0a c0       	rjmp	.+20     	; 0xde4 <__vector_9+0x100>
		}else
			stepper_motors_table[index].timer++;
     dd0:	1c 9f       	mul	r17, r28
     dd2:	f0 01       	movw	r30, r0
     dd4:	1d 9f       	mul	r17, r29
     dd6:	f0 0d       	add	r31, r0
     dd8:	11 24       	eor	r1, r1
     dda:	ee 55       	subi	r30, 0x5E	; 94
     ddc:	fc 4f       	sbci	r31, 0xFC	; 252
     dde:	86 81       	ldd	r24, Z+6	; 0x06
     de0:	8f 5f       	subi	r24, 0xFF	; 255
     de2:	86 83       	std	Z+6, r24	; 0x06
     de4:	21 96       	adiw	r28, 0x01	; 1
	
	sei();
}
ISR(TIMER0_OVF_vect)
{
	for(uint8_t index = 0; index < STEPPER_NUM_OF_MOTORS; index++)
     de6:	c4 30       	cpi	r28, 0x04	; 4
     de8:	d1 05       	cpc	r29, r1
     dea:	09 f0       	breq	.+2      	; 0xdee <__vector_9+0x10a>
     dec:	94 cf       	rjmp	.-216    	; 0xd16 <__vector_9+0x32>
     dee:	04 c0       	rjmp	.+8      	; 0xdf8 <__vector_9+0x114>
	}
	for(uint8_t index = 0; index < SERVO_NUM_OF_SERVOS; index++)
	{
		if(servo_servos_table[index].orders_head != 0)
		{
			servo_process_servo(index);
     df0:	80 e0       	ldi	r24, 0x00	; 0
     df2:	0e 94 35 03 	call	0x66a	; 0x66a <servo_process_servo>
     df6:	04 c0       	rjmp	.+8      	; 0xe00 <__vector_9+0x11c>
		}else
			stepper_motors_table[index].timer++;
	}
	for(uint8_t index = 0; index < SERVO_NUM_OF_SERVOS; index++)
	{
		if(servo_servos_table[index].orders_head != 0)
     df8:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <servo_servos_table+0x6>
     dfc:	81 11       	cpse	r24, r1
     dfe:	f8 cf       	rjmp	.-16     	; 0xdf0 <__vector_9+0x10c>
		{
			servo_process_servo(index);
		}
	}
}
     e00:	ff 91       	pop	r31
     e02:	ef 91       	pop	r30
     e04:	df 91       	pop	r29
     e06:	cf 91       	pop	r28
     e08:	bf 91       	pop	r27
     e0a:	af 91       	pop	r26
     e0c:	9f 91       	pop	r25
     e0e:	8f 91       	pop	r24
     e10:	7f 91       	pop	r23
     e12:	6f 91       	pop	r22
     e14:	5f 91       	pop	r21
     e16:	4f 91       	pop	r20
     e18:	3f 91       	pop	r19
     e1a:	2f 91       	pop	r18
     e1c:	1f 91       	pop	r17
     e1e:	ff 90       	pop	r15
     e20:	ef 90       	pop	r14
     e22:	0f 90       	pop	r0
     e24:	0f be       	out	0x3f, r0	; 63
     e26:	0f 90       	pop	r0
     e28:	1f 90       	pop	r1
     e2a:	18 95       	reti

00000e2c <stepper_push_back_order>:
				*stepper_motors_table[index_arg].port &= ~(0xF);
			}  
	}
}
void stepper_push_back_order(uint8_t index_arg,uint16_t limit_arg,enum StepperDirection direction_arg, uint8_t customer_barrier_arg, uint8_t customer_index_arg, char isServoBarrier)
{	
     e2c:	ef 92       	push	r14
     e2e:	0f 93       	push	r16
     e30:	cf 93       	push	r28
     e32:	df 93       	push	r29
     e34:	00 d0       	rcall	.+0      	; 0xe36 <stepper_push_back_order+0xa>
     e36:	cd b7       	in	r28, 0x3d	; 61
     e38:	de b7       	in	r29, 0x3e	; 62
	uint8_t offset = 0;
	
	if(isServoBarrier == 'y')
     e3a:	99 e7       	ldi	r25, 0x79	; 121
     e3c:	e9 16       	cp	r14, r25
     e3e:	39 f0       	breq	.+14     	; 0xe4e <stepper_push_back_order+0x22>
	}else
	{
		uint8_t j;
		for(j=1;j<STEPPER_ORDERS_TOTAL_NUMBER; j++) //calculate the real barrier
		{
			if(stepper_motors_orders[j].customer_index == customer_barrier_arg)
     e40:	90 91 a8 00 	lds	r25, 0x00A8	; 0x8000a8 <stepper_motors_orders+0x6>
     e44:	92 17       	cp	r25, r18
     e46:	09 f4       	brne	.+2      	; 0xe4a <stepper_push_back_order+0x1e>
     e48:	2c c1       	rjmp	.+600    	; 0x10a2 <stepper_push_back_order+0x276>
     e4a:	92 e0       	ldi	r25, 0x02	; 2
     e4c:	29 c0       	rjmp	.+82     	; 0xea0 <stepper_push_back_order+0x74>
	{
		uint8_t j;
		offset = STEPPER_ORDERS_TOTAL_NUMBER; //still dont know what im doing here
		for(j=1;j<SERVO_ORDERS_TOTAL_NUMBER; j++) //calculate the real barrier
		{
			if(servo_orders_table[j].customer_index == customer_barrier_arg)
     e4e:	90 91 75 00 	lds	r25, 0x0075	; 0x800075 <servo_orders_table+0x5>
     e52:	92 17       	cp	r25, r18
     e54:	09 f4       	brne	.+2      	; 0xe58 <stepper_push_back_order+0x2c>
     e56:	20 c1       	rjmp	.+576    	; 0x1098 <stepper_push_back_order+0x26c>
     e58:	e2 e0       	ldi	r30, 0x02	; 2
     e5a:	f0 e0       	ldi	r31, 0x00	; 0
     e5c:	9e 2f       	mov	r25, r30
     e5e:	df 01       	movw	r26, r30
     e60:	aa 0f       	add	r26, r26
     e62:	bb 1f       	adc	r27, r27
     e64:	aa 0f       	add	r26, r26
     e66:	bb 1f       	adc	r27, r27
     e68:	ae 0f       	add	r26, r30
     e6a:	bf 1f       	adc	r27, r31
     e6c:	a0 59       	subi	r26, 0x90	; 144
     e6e:	bf 4f       	sbci	r27, 0xFF	; 255
     e70:	3c 91       	ld	r19, X
     e72:	32 13       	cpse	r19, r18
     e74:	07 c0       	rjmp	.+14     	; 0xe84 <stepper_push_back_order+0x58>
			{
				if(customer_barrier_arg != 0) customer_barrier_arg = j;
     e76:	22 23       	and	r18, r18
     e78:	69 f0       	breq	.+26     	; 0xe94 <stepper_push_back_order+0x68>
     e7a:	01 c0       	rjmp	.+2      	; 0xe7e <stepper_push_back_order+0x52>
     e7c:	91 e0       	ldi	r25, 0x01	; 1
     e7e:	29 2f       	mov	r18, r25
	uint8_t offset = 0;
	
	if(isServoBarrier == 'y')
	{
		uint8_t j;
		offset = STEPPER_ORDERS_TOTAL_NUMBER; //still dont know what im doing here
     e80:	30 e8       	ldi	r19, 0x80	; 128
     e82:	09 c0       	rjmp	.+18     	; 0xe96 <stepper_push_back_order+0x6a>
     e84:	91 e0       	ldi	r25, 0x01	; 1
     e86:	9e 0f       	add	r25, r30
     e88:	31 96       	adiw	r30, 0x01	; 1
		for(j=1;j<SERVO_ORDERS_TOTAL_NUMBER; j++) //calculate the real barrier
     e8a:	ea 30       	cpi	r30, 0x0A	; 10
     e8c:	f1 05       	cpc	r31, r1
     e8e:	31 f7       	brne	.-52     	; 0xe5c <stepper_push_back_order+0x30>
	uint8_t offset = 0;
	
	if(isServoBarrier == 'y')
	{
		uint8_t j;
		offset = STEPPER_ORDERS_TOTAL_NUMBER; //still dont know what im doing here
     e90:	30 e8       	ldi	r19, 0x80	; 128
     e92:	01 c0       	rjmp	.+2      	; 0xe96 <stepper_push_back_order+0x6a>
		{
			if(servo_orders_table[j].customer_index == customer_barrier_arg)
			{
				if(customer_barrier_arg != 0) customer_barrier_arg = j;
				else
					offset = 0;
     e94:	30 e0       	ldi	r19, 0x00	; 0
				break;
			}
		}
		if(j == SERVO_ORDERS_TOTAL_NUMBER) { offset = 0; customer_barrier_arg = 0; }
     e96:	9a 30       	cpi	r25, 0x0A	; 10
     e98:	f9 f4       	brne	.+62     	; 0xed8 <stepper_push_back_order+0xac>
     e9a:	30 e0       	ldi	r19, 0x00	; 0
     e9c:	20 e0       	ldi	r18, 0x00	; 0
     e9e:	1c c0       	rjmp	.+56     	; 0xed8 <stepper_push_back_order+0xac>
	}else
	{
		uint8_t j;
		for(j=1;j<STEPPER_ORDERS_TOTAL_NUMBER; j++) //calculate the real barrier
		{
			if(stepper_motors_orders[j].customer_index == customer_barrier_arg)
     ea0:	e9 2f       	mov	r30, r25
     ea2:	f0 e0       	ldi	r31, 0x00	; 0
     ea4:	df 01       	movw	r26, r30
     ea6:	aa 0f       	add	r26, r26
     ea8:	bb 1f       	adc	r27, r27
     eaa:	ea 0f       	add	r30, r26
     eac:	fb 1f       	adc	r31, r27
     eae:	ee 0f       	add	r30, r30
     eb0:	ff 1f       	adc	r31, r31
     eb2:	ee 55       	subi	r30, 0x5E	; 94
     eb4:	ff 4f       	sbci	r31, 0xFF	; 255
     eb6:	30 81       	ld	r19, Z
     eb8:	32 13       	cpse	r19, r18
     eba:	06 c0       	rjmp	.+12     	; 0xec8 <stepper_push_back_order+0x9c>
			{
				if(customer_barrier_arg != 0) customer_barrier_arg = j;
     ebc:	22 23       	and	r18, r18
     ebe:	31 f0       	breq	.+12     	; 0xecc <stepper_push_back_order+0xa0>
     ec0:	01 c0       	rjmp	.+2      	; 0xec4 <stepper_push_back_order+0x98>
     ec2:	91 e0       	ldi	r25, 0x01	; 1
     ec4:	29 2f       	mov	r18, r25
     ec6:	02 c0       	rjmp	.+4      	; 0xecc <stepper_push_back_order+0xa0>
		}
		if(j == SERVO_ORDERS_TOTAL_NUMBER) { offset = 0; customer_barrier_arg = 0; }
	}else
	{
		uint8_t j;
		for(j=1;j<STEPPER_ORDERS_TOTAL_NUMBER; j++) //calculate the real barrier
     ec8:	9f 5f       	subi	r25, 0xFF	; 255
     eca:	52 f7       	brpl	.-44     	; 0xea0 <stepper_push_back_order+0x74>
				else 
					offset = 0;
				break;
			}
		}
		if(j == STEPPER_ORDERS_TOTAL_NUMBER) { offset = 0; customer_barrier_arg = 0; }
     ecc:	90 38       	cpi	r25, 0x80	; 128
     ece:	19 f4       	brne	.+6      	; 0xed6 <stepper_push_back_order+0xaa>
     ed0:	30 e0       	ldi	r19, 0x00	; 0
     ed2:	20 e0       	ldi	r18, 0x00	; 0
     ed4:	01 c0       	rjmp	.+2      	; 0xed8 <stepper_push_back_order+0xac>
     ed6:	30 e0       	ldi	r19, 0x00	; 0
	}
	volatile uint8_t i;
	for(i=1;i<STEPPER_ORDERS_TOTAL_NUMBER;i++)
     ed8:	91 e0       	ldi	r25, 0x01	; 1
     eda:	99 83       	std	Y+1, r25	; 0x01
     edc:	99 81       	ldd	r25, Y+1	; 0x01
     ede:	99 23       	and	r25, r25
     ee0:	0c f4       	brge	.+2      	; 0xee4 <stepper_push_back_order+0xb8>
     ee2:	69 c0       	rjmp	.+210    	; 0xfb6 <stepper_push_back_order+0x18a>
	{
		if(stepper_motors_orders[i].move == 0)
     ee4:	e9 81       	ldd	r30, Y+1	; 0x01
     ee6:	f0 e0       	ldi	r31, 0x00	; 0
     ee8:	df 01       	movw	r26, r30
     eea:	aa 0f       	add	r26, r26
     eec:	bb 1f       	adc	r27, r27
     eee:	ea 0f       	add	r30, r26
     ef0:	fb 1f       	adc	r31, r27
     ef2:	ee 0f       	add	r30, r30
     ef4:	ff 1f       	adc	r31, r31
     ef6:	ee 55       	subi	r30, 0x5E	; 94
     ef8:	ff 4f       	sbci	r31, 0xFF	; 255
     efa:	02 80       	ldd	r0, Z+2	; 0x02
     efc:	f3 81       	ldd	r31, Z+3	; 0x03
     efe:	e0 2d       	mov	r30, r0
     f00:	ef 2b       	or	r30, r31
     f02:	09 f0       	breq	.+2      	; 0xf06 <stepper_push_back_order+0xda>
     f04:	51 c0       	rjmp	.+162    	; 0xfa8 <stepper_push_back_order+0x17c>
     f06:	11 c0       	rjmp	.+34     	; 0xf2a <stepper_push_back_order+0xfe>
     f08:	e9 81       	ldd	r30, Y+1	; 0x01
     f0a:	f0 e0       	ldi	r31, 0x00	; 0
     f0c:	df 01       	movw	r26, r30
     f0e:	aa 0f       	add	r26, r26
     f10:	bb 1f       	adc	r27, r27
     f12:	ea 0f       	add	r30, r26
     f14:	fb 1f       	adc	r31, r27
     f16:	ee 0f       	add	r30, r30
     f18:	ff 1f       	adc	r31, r31
     f1a:	ee 55       	subi	r30, 0x5E	; 94
     f1c:	ff 4f       	sbci	r31, 0xFF	; 255
     f1e:	02 80       	ldd	r0, Z+2	; 0x02
     f20:	f3 81       	ldd	r31, Z+3	; 0x03
     f22:	e0 2d       	mov	r30, r0
     f24:	ef 2b       	or	r30, r31
     f26:	09 f0       	breq	.+2      	; 0xf2a <stepper_push_back_order+0xfe>
     f28:	3f c0       	rjmp	.+126    	; 0xfa8 <stepper_push_back_order+0x17c>
		{
			stepper_motors_orders[i].customer_index = customer_index_arg;
     f2a:	e9 81       	ldd	r30, Y+1	; 0x01
     f2c:	f0 e0       	ldi	r31, 0x00	; 0
     f2e:	df 01       	movw	r26, r30
     f30:	aa 0f       	add	r26, r26
     f32:	bb 1f       	adc	r27, r27
     f34:	ea 0f       	add	r30, r26
     f36:	fb 1f       	adc	r31, r27
     f38:	ee 0f       	add	r30, r30
     f3a:	ff 1f       	adc	r31, r31
     f3c:	ee 55       	subi	r30, 0x5E	; 94
     f3e:	ff 4f       	sbci	r31, 0xFF	; 255
     f40:	00 83       	st	Z, r16
			stepper_motors_orders[i].next = 0;
     f42:	e9 81       	ldd	r30, Y+1	; 0x01
     f44:	f0 e0       	ldi	r31, 0x00	; 0
     f46:	df 01       	movw	r26, r30
     f48:	aa 0f       	add	r26, r26
     f4a:	bb 1f       	adc	r27, r27
     f4c:	ea 0f       	add	r30, r26
     f4e:	fb 1f       	adc	r31, r27
     f50:	ee 0f       	add	r30, r30
     f52:	ff 1f       	adc	r31, r31
     f54:	ee 55       	subi	r30, 0x5E	; 94
     f56:	ff 4f       	sbci	r31, 0xFF	; 255
     f58:	15 82       	std	Z+5, r1	; 0x05
			stepper_motors_orders[i].direction = direction_arg;
     f5a:	e9 81       	ldd	r30, Y+1	; 0x01
     f5c:	f0 e0       	ldi	r31, 0x00	; 0
     f5e:	df 01       	movw	r26, r30
     f60:	aa 0f       	add	r26, r26
     f62:	bb 1f       	adc	r27, r27
     f64:	ea 0f       	add	r30, r26
     f66:	fb 1f       	adc	r31, r27
     f68:	ee 0f       	add	r30, r30
     f6a:	ff 1f       	adc	r31, r31
     f6c:	ee 55       	subi	r30, 0x5E	; 94
     f6e:	ff 4f       	sbci	r31, 0xFF	; 255
     f70:	41 83       	std	Z+1, r20	; 0x01
			stepper_motors_orders[i].move = limit_arg;
     f72:	49 81       	ldd	r20, Y+1	; 0x01
     f74:	50 e0       	ldi	r21, 0x00	; 0
     f76:	fa 01       	movw	r30, r20
     f78:	ee 0f       	add	r30, r30
     f7a:	ff 1f       	adc	r31, r31
     f7c:	e4 0f       	add	r30, r20
     f7e:	f5 1f       	adc	r31, r21
     f80:	ee 0f       	add	r30, r30
     f82:	ff 1f       	adc	r31, r31
     f84:	ee 55       	subi	r30, 0x5E	; 94
     f86:	ff 4f       	sbci	r31, 0xFF	; 255
     f88:	73 83       	std	Z+3, r23	; 0x03
     f8a:	62 83       	std	Z+2, r22	; 0x02
			stepper_motors_orders[i].barrier = customer_barrier_arg+offset; //here its not customers barrier
     f8c:	49 81       	ldd	r20, Y+1	; 0x01
     f8e:	50 e0       	ldi	r21, 0x00	; 0
     f90:	23 0f       	add	r18, r19
     f92:	fa 01       	movw	r30, r20
     f94:	ee 0f       	add	r30, r30
     f96:	ff 1f       	adc	r31, r31
     f98:	e4 0f       	add	r30, r20
     f9a:	f5 1f       	adc	r31, r21
     f9c:	ee 0f       	add	r30, r30
     f9e:	ff 1f       	adc	r31, r31
     fa0:	ee 55       	subi	r30, 0x5E	; 94
     fa2:	ff 4f       	sbci	r31, 0xFF	; 255
     fa4:	24 83       	std	Z+4, r18	; 0x04
			break;
     fa6:	07 c0       	rjmp	.+14     	; 0xfb6 <stepper_push_back_order+0x18a>
			}
		}
		if(j == STEPPER_ORDERS_TOTAL_NUMBER) { offset = 0; customer_barrier_arg = 0; }
	}
	volatile uint8_t i;
	for(i=1;i<STEPPER_ORDERS_TOTAL_NUMBER;i++)
     fa8:	99 81       	ldd	r25, Y+1	; 0x01
     faa:	9f 5f       	subi	r25, 0xFF	; 255
     fac:	99 83       	std	Y+1, r25	; 0x01
     fae:	99 81       	ldd	r25, Y+1	; 0x01
     fb0:	99 23       	and	r25, r25
     fb2:	0c f0       	brlt	.+2      	; 0xfb6 <stepper_push_back_order+0x18a>
     fb4:	a9 cf       	rjmp	.-174    	; 0xf08 <stepper_push_back_order+0xdc>
			stepper_motors_orders[i].move = limit_arg;
			stepper_motors_orders[i].barrier = customer_barrier_arg+offset; //here its not customers barrier
			break;
		}
	}
	volatile uint8_t temp = stepper_motors_table[index_arg].orders_head;	
     fb6:	28 2f       	mov	r18, r24
     fb8:	30 e0       	ldi	r19, 0x00	; 0
     fba:	9b e0       	ldi	r25, 0x0B	; 11
     fbc:	89 9f       	mul	r24, r25
     fbe:	f0 01       	movw	r30, r0
     fc0:	11 24       	eor	r1, r1
     fc2:	ee 55       	subi	r30, 0x5E	; 94
     fc4:	fc 4f       	sbci	r31, 0xFC	; 252
     fc6:	85 81       	ldd	r24, Z+5	; 0x05
     fc8:	8a 83       	std	Y+2, r24	; 0x02
	
	if(temp != 0)
     fca:	8a 81       	ldd	r24, Y+2	; 0x02
     fcc:	88 23       	and	r24, r24
     fce:	b9 f1       	breq	.+110    	; 0x103e <stepper_push_back_order+0x212>
	{
		while(stepper_motors_orders[temp].next != 0) temp = stepper_motors_orders[temp].next;
     fd0:	8a 81       	ldd	r24, Y+2	; 0x02
     fd2:	90 e0       	ldi	r25, 0x00	; 0
     fd4:	fc 01       	movw	r30, r24
     fd6:	ee 0f       	add	r30, r30
     fd8:	ff 1f       	adc	r31, r31
     fda:	e8 0f       	add	r30, r24
     fdc:	f9 1f       	adc	r31, r25
     fde:	ee 0f       	add	r30, r30
     fe0:	ff 1f       	adc	r31, r31
     fe2:	ee 55       	subi	r30, 0x5E	; 94
     fe4:	ff 4f       	sbci	r31, 0xFF	; 255
     fe6:	85 81       	ldd	r24, Z+5	; 0x05
     fe8:	88 23       	and	r24, r24
     fea:	d9 f0       	breq	.+54     	; 0x1022 <stepper_push_back_order+0x1f6>
     fec:	8a 81       	ldd	r24, Y+2	; 0x02
     fee:	90 e0       	ldi	r25, 0x00	; 0
     ff0:	fc 01       	movw	r30, r24
     ff2:	ee 0f       	add	r30, r30
     ff4:	ff 1f       	adc	r31, r31
     ff6:	e8 0f       	add	r30, r24
     ff8:	f9 1f       	adc	r31, r25
     ffa:	ee 0f       	add	r30, r30
     ffc:	ff 1f       	adc	r31, r31
     ffe:	ee 55       	subi	r30, 0x5E	; 94
    1000:	ff 4f       	sbci	r31, 0xFF	; 255
    1002:	85 81       	ldd	r24, Z+5	; 0x05
    1004:	8a 83       	std	Y+2, r24	; 0x02
    1006:	8a 81       	ldd	r24, Y+2	; 0x02
    1008:	90 e0       	ldi	r25, 0x00	; 0
    100a:	fc 01       	movw	r30, r24
    100c:	ee 0f       	add	r30, r30
    100e:	ff 1f       	adc	r31, r31
    1010:	e8 0f       	add	r30, r24
    1012:	f9 1f       	adc	r31, r25
    1014:	ee 0f       	add	r30, r30
    1016:	ff 1f       	adc	r31, r31
    1018:	ee 55       	subi	r30, 0x5E	; 94
    101a:	ff 4f       	sbci	r31, 0xFF	; 255
    101c:	85 81       	ldd	r24, Z+5	; 0x05
    101e:	81 11       	cpse	r24, r1
    1020:	e5 cf       	rjmp	.-54     	; 0xfec <stepper_push_back_order+0x1c0>
		stepper_motors_orders[temp].next = i;
    1022:	8a 81       	ldd	r24, Y+2	; 0x02
    1024:	90 e0       	ldi	r25, 0x00	; 0
    1026:	29 81       	ldd	r18, Y+1	; 0x01
    1028:	fc 01       	movw	r30, r24
    102a:	ee 0f       	add	r30, r30
    102c:	ff 1f       	adc	r31, r31
    102e:	e8 0f       	add	r30, r24
    1030:	f9 1f       	adc	r31, r25
    1032:	ee 0f       	add	r30, r30
    1034:	ff 1f       	adc	r31, r31
    1036:	ee 55       	subi	r30, 0x5E	; 94
    1038:	ff 4f       	sbci	r31, 0xFF	; 255
    103a:	25 83       	std	Z+5, r18	; 0x05
    103c:	37 c0       	rjmp	.+110    	; 0x10ac <stepper_push_back_order+0x280>
	}
	else
		{
			if(stepper_motors_orders[i].direction == CLOCKWISE) 
    103e:	89 81       	ldd	r24, Y+1	; 0x01
    1040:	90 e0       	ldi	r25, 0x00	; 0
    1042:	fc 01       	movw	r30, r24
    1044:	ee 0f       	add	r30, r30
    1046:	ff 1f       	adc	r31, r31
    1048:	e8 0f       	add	r30, r24
    104a:	f9 1f       	adc	r31, r25
    104c:	ee 0f       	add	r30, r30
    104e:	ff 1f       	adc	r31, r31
    1050:	ee 55       	subi	r30, 0x5E	; 94
    1052:	ff 4f       	sbci	r31, 0xFF	; 255
    1054:	81 81       	ldd	r24, Z+1	; 0x01
    1056:	81 11       	cpse	r24, r1
    1058:	0a c0       	rjmp	.+20     	; 0x106e <stepper_push_back_order+0x242>
				stepper_motors_table[index_arg].mode = PHASE_A;
    105a:	8b e0       	ldi	r24, 0x0B	; 11
    105c:	82 9f       	mul	r24, r18
    105e:	f0 01       	movw	r30, r0
    1060:	83 9f       	mul	r24, r19
    1062:	f0 0d       	add	r31, r0
    1064:	11 24       	eor	r1, r1
    1066:	ee 55       	subi	r30, 0x5E	; 94
    1068:	fc 4f       	sbci	r31, 0xFC	; 252
    106a:	11 86       	std	Z+9, r1	; 0x09
    106c:	0a c0       	rjmp	.+20     	; 0x1082 <stepper_push_back_order+0x256>
			else 
				stepper_motors_table[index_arg].mode = PHASE_D;
    106e:	8b e0       	ldi	r24, 0x0B	; 11
    1070:	82 9f       	mul	r24, r18
    1072:	f0 01       	movw	r30, r0
    1074:	83 9f       	mul	r24, r19
    1076:	f0 0d       	add	r31, r0
    1078:	11 24       	eor	r1, r1
    107a:	ee 55       	subi	r30, 0x5E	; 94
    107c:	fc 4f       	sbci	r31, 0xFC	; 252
    107e:	83 e0       	ldi	r24, 0x03	; 3
    1080:	81 87       	std	Z+9, r24	; 0x09
			
			stepper_motors_table[index_arg].orders_head = i;
    1082:	89 81       	ldd	r24, Y+1	; 0x01
    1084:	9b e0       	ldi	r25, 0x0B	; 11
    1086:	92 9f       	mul	r25, r18
    1088:	f0 01       	movw	r30, r0
    108a:	93 9f       	mul	r25, r19
    108c:	f0 0d       	add	r31, r0
    108e:	11 24       	eor	r1, r1
    1090:	ee 55       	subi	r30, 0x5E	; 94
    1092:	fc 4f       	sbci	r31, 0xFC	; 252
    1094:	85 83       	std	Z+5, r24	; 0x05
    1096:	0a c0       	rjmp	.+20     	; 0x10ac <stepper_push_back_order+0x280>
		offset = STEPPER_ORDERS_TOTAL_NUMBER; //still dont know what im doing here
		for(j=1;j<SERVO_ORDERS_TOTAL_NUMBER; j++) //calculate the real barrier
		{
			if(servo_orders_table[j].customer_index == customer_barrier_arg)
			{
				if(customer_barrier_arg != 0) customer_barrier_arg = j;
    1098:	91 11       	cpse	r25, r1
    109a:	f0 ce       	rjmp	.-544    	; 0xe7c <stepper_push_back_order+0x50>
				else
					offset = 0;
    109c:	30 e0       	ldi	r19, 0x00	; 0
		offset = STEPPER_ORDERS_TOTAL_NUMBER; //still dont know what im doing here
		for(j=1;j<SERVO_ORDERS_TOTAL_NUMBER; j++) //calculate the real barrier
		{
			if(servo_orders_table[j].customer_index == customer_barrier_arg)
			{
				if(customer_barrier_arg != 0) customer_barrier_arg = j;
    109e:	20 e0       	ldi	r18, 0x00	; 0
    10a0:	1b cf       	rjmp	.-458    	; 0xed8 <stepper_push_back_order+0xac>
		uint8_t j;
		for(j=1;j<STEPPER_ORDERS_TOTAL_NUMBER; j++) //calculate the real barrier
		{
			if(stepper_motors_orders[j].customer_index == customer_barrier_arg)
			{
				if(customer_barrier_arg != 0) customer_barrier_arg = j;
    10a2:	91 11       	cpse	r25, r1
    10a4:	0e cf       	rjmp	.-484    	; 0xec2 <stepper_push_back_order+0x96>
    10a6:	30 e0       	ldi	r19, 0x00	; 0
    10a8:	20 e0       	ldi	r18, 0x00	; 0
    10aa:	16 cf       	rjmp	.-468    	; 0xed8 <stepper_push_back_order+0xac>
			else 
				stepper_motors_table[index_arg].mode = PHASE_D;
			
			stepper_motors_table[index_arg].orders_head = i;
		}
    10ac:	0f 90       	pop	r0
    10ae:	0f 90       	pop	r0
    10b0:	df 91       	pop	r29
    10b2:	cf 91       	pop	r28
    10b4:	0f 91       	pop	r16
    10b6:	ef 90       	pop	r14
    10b8:	08 95       	ret

000010ba <_exit>:
    10ba:	f8 94       	cli

000010bc <__stop_program>:
    10bc:	ff cf       	rjmp	.-2      	; 0x10bc <__stop_program>
